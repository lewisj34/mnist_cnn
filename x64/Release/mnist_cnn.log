  main.cpp
C:\vcpkg\installed\x64-windows\include\mlpack\core\util\arma_config_check.hpp(50,17): warning C4081: expected '('; found 'string'
C:\vcpkg\installed\x64-windows\include\mlpack\core\math\random.hpp(45,34): warning C4267: 'argument': conversion from 'size_t' to 'const arma::arma_rng::seed_type', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\core\math\random.hpp(64,32): warning C4267: 'argument': conversion from 'size_t' to 'const arma::arma_rng::seed_type', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\core\math\random.hpp(71,32): warning C4267: 'argument': conversion from 'size_t' to 'const arma::arma_rng::seed_type', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\core\math\random.hpp(162,56): warning C4267: 'argument': conversion from 'size_t' to 'const int', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\core\dists\discrete_distribution.hpp(66,52): warning C4244: 'argument': conversion from 'const size_t' to 'const double', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\core\dists\discrete_distribution.hpp(89,63): warning C4244: 'argument': conversion from 'const size_t' to 'const double', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\core\dists\discrete_distribution.hpp(110,19): warning C4244: 'argument': conversion from 'const arma::uword' to 'const double', possible loss of data
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\problems\aug_lagrangian_test_functions_impl.hpp(189,30): warning C4244: '=': conversion from 'double' to 'size_t', possible loss of data
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\problems\aug_lagrangian_test_functions_impl.hpp(237,24): warning C4244: 'argument': conversion from 'eT' to 'const arma::uword', possible loss of data
          with
          [
              eT=double
          ]
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\problems\aug_lagrangian_test_functions_impl.hpp(237,15): warning C4244: 'argument': conversion from 'eT' to 'const arma::uword', possible loss of data
          with
          [
              eT=double
          ]
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\problems\aug_lagrangian_test_functions_impl.hpp(238,24): warning C4244: 'argument': conversion from 'eT' to 'const arma::uword', possible loss of data
          with
          [
              eT=double
          ]
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\problems\aug_lagrangian_test_functions_impl.hpp(238,15): warning C4244: 'argument': conversion from 'eT' to 'const arma::uword', possible loss of data
          with
          [
              eT=double
          ]
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\problems\aug_lagrangian_test_functions_impl.hpp(270,12): warning C4244: 'initializing': conversion from 'eT' to 'size_t', possible loss of data
          with
          [
              eT=double
          ]
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\problems\aug_lagrangian_test_functions_impl.hpp(271,12): warning C4244: 'initializing': conversion from 'eT' to 'size_t', possible loss of data
          with
          [
              eT=double
          ]
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\problems\aug_lagrangian_test_functions_impl.hpp(287,12): warning C4244: 'initializing': conversion from 'eT' to 'size_t', possible loss of data
          with
          [
              eT=double
          ]
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\problems\aug_lagrangian_test_functions_impl.hpp(288,12): warning C4244: 'initializing': conversion from 'eT' to 'size_t', possible loss of data
          with
          [
              eT=double
          ]
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\problems\aug_lagrangian_test_functions_impl.hpp(323,11): warning C4244: 'initializing': conversion from 'size_t' to 'float', possible loss of data
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\problems\aug_lagrangian_test_functions_impl.hpp(324,11): warning C4244: 'initializing': conversion from 'double' to 'float', possible loss of data
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\problems\aug_lagrangian_test_functions_impl.hpp(326,9): warning C4244: '=': conversion from 'size_t' to 'float', possible loss of data
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\problems\aug_lagrangian_test_functions_impl.hpp(328,29): warning C4244: 'argument': conversion from 'float' to 'const arma::uword', possible loss of data
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\problems\softmax_regression_function_impl.hpp(266,59): warning C4244: 'argument': conversion from 'const arma::uword' to 'const double', possible loss of data
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\problems\softmax_regression_function_impl.hpp(269,30): warning C4244: 'argument': conversion from 'const arma::uword' to 'const double', possible loss of data
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\problems\softmax_regression_function_impl.hpp(274,63): warning C4244: 'argument': conversion from 'const arma::uword' to 'const double', possible loss of data
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\problems\softmax_regression_function_impl.hpp(295,55): warning C4244: 'argument': conversion from 'const size_t' to 'const double', possible loss of data
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\problems\softmax_regression_function_impl.hpp(298,63): warning C4244: 'argument': conversion from 'const size_t' to 'const double', possible loss of data
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\problems\softmax_regression_function_impl.hpp(304,57): warning C4244: 'argument': conversion from 'const size_t' to 'const double', possible loss of data
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\problems\softmax_regression_function_impl.hpp(326,63): warning C4244: 'argument': conversion from 'const arma::uword' to 'const double', possible loss of data
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\problems\softmax_regression_function_impl.hpp(331,55): warning C4244: 'argument': conversion from 'const arma::uword' to 'const double', possible loss of data
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\problems\softmax_regression_function_impl.hpp(337,53): warning C4244: 'argument': conversion from 'const arma::uword' to 'const double', possible loss of data
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\parallel_sgd\decay_policies\exponential_backoff.hpp(67,1): warning C4244: '+=': conversion from 'double' to 'size_t', possible loss of data
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\sgdr\snapshot_ensembles.hpp(75,1): warning C4244: '*=': conversion from 'const double' to 'size_t', possible loss of data
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\sgdr\snapshot_ensembles.hpp(81,35): warning C4244: '=': conversion from 'double' to 'size_t', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\loss_functions\negative_log_likelihood_impl.hpp(35,26): warning C4244: 'initializing': conversion from 'eT' to 'size_t', possible loss of data
          with
          [
              eT=double
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\ffn_impl.hpp(309): message : see reference to function template instantiation 'double mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>::Forward<arma::Mat<double>,arma::subview<eT>>(const InputType &&,TargetType &&)' being compiled
          with
          [
              eT=double,
              InputType=arma::Mat<double>,
              TargetType=arma::subview<double>
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\ffn_impl.hpp(329): message : see reference to function template instantiation 'double mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>::Forward<arma::Mat<double>,arma::subview<eT>>(const InputType &&,TargetType &&)' being compiled
          with
          [
              eT=double,
              InputType=arma::Mat<double>,
              TargetType=arma::subview<double>
          ]
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\function\add_separable_evaluate_with_gradient.hpp(81): message : see reference to function template instantiation 'double mlpack::ann::FFN<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,mlpack::ann::RandomInitialization>::EvaluateWithGradient<arma::Mat<double>>(const arma::mat &,const size_t,GradType &,const size_t)' being compiled
          with
          [
              GradType=arma::Mat<double>
          ]
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\function\add_separable_evaluate_with_gradient.hpp(77): message : see reference to function template instantiation 'double mlpack::ann::FFN<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,mlpack::ann::RandomInitialization>::EvaluateWithGradient<arma::Mat<double>>(const arma::mat &,const size_t,GradType &,const size_t)' being compiled
          with
          [
              GradType=arma::Mat<double>
          ]
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\function\add_separable_evaluate_with_gradient.hpp(76): message : while compiling class template member function 'double ens::AddSeparableEvaluateWithGradient<FunctionType,MatType,GradType,true,true>::EvaluateWithGradient(const MatType &,const size_t,GradType &,const size_t)'
          with
          [
              FunctionType=mlpack::ann::FFN<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,mlpack::ann::RandomInitialization>,
              MatType=BaseMatType,
              GradType=BaseGradType
          ]
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\sgd\sgd_impl.hpp(137): message : see reference to function template instantiation 'double ens::AddSeparableEvaluateWithGradient<FunctionType,MatType,GradType,true,true>::EvaluateWithGradient(const MatType &,const size_t,GradType &,const size_t)' being compiled
          with
          [
              FunctionType=mlpack::ann::FFN<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,mlpack::ann::RandomInitialization>,
              MatType=BaseMatType,
              GradType=BaseGradType
          ]
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\function.hpp(63): message : see reference to class template instantiation 'ens::AddSeparableEvaluateWithGradient<FunctionType,MatType,GradType,true,true>' being compiled
          with
          [
              FunctionType=mlpack::ann::FFN<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,mlpack::ann::RandomInitialization>,
              MatType=BaseMatType,
              GradType=BaseGradType
          ]
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\sgd\sgd_impl.hpp(59): message : see reference to class template instantiation 'ens::Function<SeparableFunctionType,BaseMatType,BaseGradType>' being compiled
          with
          [
              SeparableFunctionType=mlpack::ann::FFN<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,mlpack::ann::RandomInitialization>
          ]
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\adam\adam.hpp(128): message : see reference to function template instantiation 'double ens::SGD<UpdateRule,ens::NoDecay>::Optimize<SeparableFunctionType,MatType,GradType,ens::PrintLoss&,ens::ProgressBar&,ens::EarlyStopAtMinLoss&>(SeparableFunctionType &,MatType &,ens::PrintLoss &,ens::ProgressBar &,ens::EarlyStopAtMinLoss &)' being compiled
          with
          [
              UpdateRule=ens::AdamUpdate,
              SeparableFunctionType=mlpack::ann::FFN<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,mlpack::ann::RandomInitialization>,
              MatType=arma::mat,
              GradType=arma::mat
          ]
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\adam\adam.hpp(129): message : see reference to function template instantiation 'double ens::SGD<UpdateRule,ens::NoDecay>::Optimize<SeparableFunctionType,MatType,GradType,ens::PrintLoss&,ens::ProgressBar&,ens::EarlyStopAtMinLoss&>(SeparableFunctionType &,MatType &,ens::PrintLoss &,ens::ProgressBar &,ens::EarlyStopAtMinLoss &)' being compiled
          with
          [
              UpdateRule=ens::AdamUpdate,
              SeparableFunctionType=mlpack::ann::FFN<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,mlpack::ann::RandomInitialization>,
              MatType=arma::mat,
              GradType=arma::mat
          ]
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\adam\adam.hpp(141): message : see reference to function template instantiation 'double ens::AdamType<ens::AdamUpdate>::Optimize<SeparableFunctionType,MatType,MatType,ens::PrintLoss&,ens::ProgressBar&,ens::EarlyStopAtMinLoss&>(SeparableFunctionType &,MatType &,ens::PrintLoss &,ens::ProgressBar &,ens::EarlyStopAtMinLoss &)' being compiled
          with
          [
              SeparableFunctionType=mlpack::ann::FFN<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,mlpack::ann::RandomInitialization>,
              MatType=arma::mat
          ]
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\adam\adam.hpp(142): message : see reference to function template instantiation 'double ens::AdamType<ens::AdamUpdate>::Optimize<SeparableFunctionType,MatType,MatType,ens::PrintLoss&,ens::ProgressBar&,ens::EarlyStopAtMinLoss&>(SeparableFunctionType &,MatType &,ens::PrintLoss &,ens::ProgressBar &,ens::EarlyStopAtMinLoss &)' being compiled
          with
          [
              SeparableFunctionType=mlpack::ann::FFN<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,mlpack::ann::RandomInitialization>,
              MatType=arma::mat
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\ffn_impl.hpp(78): message : see reference to function template instantiation 'double ens::AdamType<ens::AdamUpdate>::Optimize<mlpack::ann::FFN<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,mlpack::ann::RandomInitialization>,arma::mat,ens::PrintLoss&,ens::ProgressBar&,ens::EarlyStopAtMinLoss&>(SeparableFunctionType &,MatType &,ens::PrintLoss &,ens::ProgressBar &,ens::EarlyStopAtMinLoss &)' being compiled
          with
          [
              SeparableFunctionType=mlpack::ann::FFN<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,mlpack::ann::RandomInitialization>,
              MatType=arma::mat
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\ffn_impl.hpp(83): message : see reference to function template instantiation 'double ens::AdamType<ens::AdamUpdate>::Optimize<mlpack::ann::FFN<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,mlpack::ann::RandomInitialization>,arma::mat,ens::PrintLoss&,ens::ProgressBar&,ens::EarlyStopAtMinLoss&>(SeparableFunctionType &,MatType &,ens::PrintLoss &,ens::ProgressBar &,ens::EarlyStopAtMinLoss &)' being compiled
          with
          [
              SeparableFunctionType=mlpack::ann::FFN<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,mlpack::ann::RandomInitialization>,
              MatType=arma::mat
          ]
C:\Dev\Assignments\A5_mlpack\mlpack_cnn_basic_redo\mnist_cnn\mnist_cnn\mnist_cnn\main.cpp(182): message : see reference to function template instantiation 'double mlpack::ann::FFN<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,mlpack::ann::RandomInitialization>::Train<ens::Adam,ens::PrintLoss,ens::ProgressBar,ens::EarlyStopAtMinLoss>(arma::mat,arma::mat,OptimizerType &,ens::PrintLoss &&,ens::ProgressBar &&,ens::EarlyStopAtMinLoss &&)' being compiled
          with
          [
              OptimizerType=ens::Adam
          ]
C:\Dev\Assignments\A5_mlpack\mlpack_cnn_basic_redo\mnist_cnn\mnist_cnn\mnist_cnn\main.cpp(176): message : see reference to function template instantiation 'double mlpack::ann::FFN<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,mlpack::ann::RandomInitialization>::Train<ens::Adam,ens::PrintLoss,ens::ProgressBar,ens::EarlyStopAtMinLoss>(arma::mat,arma::mat,OptimizerType &,ens::PrintLoss &&,ens::ProgressBar &&,ens::EarlyStopAtMinLoss &&)' being compiled
          with
          [
              OptimizerType=ens::Adam
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\loss_functions\negative_log_likelihood_impl.hpp(55,26): warning C4244: 'initializing': conversion from 'eT' to 'size_t', possible loss of data
          with
          [
              eT=double
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\ffn_impl.hpp(309): message : see reference to function template instantiation 'void mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>::Backward<arma::Mat<double>,arma::subview<eT>,arma::Mat<eT>>(const InputType &&,const TargetType &&,OutputType &&)' being compiled
          with
          [
              eT=double,
              InputType=arma::Mat<double>,
              TargetType=arma::subview<double>,
              OutputType=arma::Mat<double>
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\ffn_impl.hpp(338): message : see reference to function template instantiation 'void mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>::Backward<arma::Mat<double>,arma::subview<eT>,arma::Mat<eT>>(const InputType &&,const TargetType &&,OutputType &&)' being compiled
          with
          [
              eT=double,
              InputType=arma::Mat<double>,
              TargetType=arma::subview<double>,
              OutputType=arma::Mat<double>
          ]
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\callbacks\progress_bar.hpp(146,57): warning C4244: 'initializing': conversion from 'double' to 'size_t', possible loss of data
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\callbacks\callbacks.hpp(720): message : see reference to function template instantiation 'void ens::ProgressBar::StepTaken<OptimizerType,FunctionType,MatType>(OptimizerType &,FunctionType &,const MatType &)' being compiled
          with
          [
              OptimizerType=ens::SGD<ens::AdamUpdate,ens::NoDecay>,
              FunctionType=FullFunctionType,
              MatType=BaseMatType
          ]
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\callbacks\callbacks.hpp(755): message : see reference to function template instantiation 'bool ens::Callback::StepTakenFunction<ens::ProgressBar,OptimizerType,FunctionType,MatType>(CallbackType &,OptimizerType &,FunctionType &,MatType &)' being compiled
          with
          [
              OptimizerType=ens::SGD<ens::AdamUpdate,ens::NoDecay>,
              FunctionType=FullFunctionType,
              MatType=BaseMatType,
              CallbackType=ens::ProgressBar
          ]
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\sgd\sgd_impl.hpp(59): message : see reference to function template instantiation 'bool ens::Callback::StepTaken<ens::SGD<UpdateRule,ens::NoDecay>,FullFunctionType,BaseMatType,ens::PrintLoss,ens::ProgressBar,ens::EarlyStopAtMinLoss>(OptimizerType &,FunctionType &,MatType &,ens::PrintLoss &,ens::ProgressBar &,ens::EarlyStopAtMinLoss &)' being compiled
          with
          [
              UpdateRule=ens::AdamUpdate,
              OptimizerType=ens::SGD<ens::AdamUpdate,ens::NoDecay>,
              FunctionType=FullFunctionType,
              MatType=BaseMatType
          ]
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\callbacks\progress_bar.hpp(146,27): warning C4244: 'initializing': conversion from 'double' to 'const size_t', possible loss of data
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\callbacks\progress_bar.hpp(148,1): warning C4244: '+=': conversion from 'double' to 'size_t', possible loss of data
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\callbacks\progress_bar.hpp(206,63): warning C4244: 'initializing': conversion from 'double' to 'size_t', possible loss of data
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\callbacks\callbacks.hpp(634): message : see reference to function template instantiation 'void ens::ProgressBar::EndEpoch<OptimizerType,FunctionType,MatType>(OptimizerType &,FunctionType &,const MatType &,const size_t,const double)' being compiled
          with
          [
              OptimizerType=ens::SGD<ens::AdamUpdate,ens::NoDecay>,
              FunctionType=FullFunctionType,
              MatType=BaseMatType
          ]
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\callbacks\callbacks.hpp(672): message : see reference to function template instantiation 'bool ens::Callback::EndEpochFunction<ens::ProgressBar,OptimizerType,FunctionType,MatType>(CallbackType &,OptimizerType &,FunctionType &,const MatType &,const size_t,const double)' being compiled
          with
          [
              OptimizerType=ens::SGD<ens::AdamUpdate,ens::NoDecay>,
              FunctionType=FullFunctionType,
              MatType=BaseMatType,
              CallbackType=ens::ProgressBar
          ]
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\sgd\sgd_impl.hpp(59): message : see reference to function template instantiation 'bool ens::Callback::EndEpoch<ens::SGD<UpdateRule,ens::NoDecay>,FullFunctionType,BaseMatType,ens::PrintLoss,ens::ProgressBar,ens::EarlyStopAtMinLoss>(OptimizerType &,FunctionType &,const MatType &,const size_t,const double,ens::PrintLoss &,ens::ProgressBar &,ens::EarlyStopAtMinLoss &)' being compiled
          with
          [
              UpdateRule=ens::AdamUpdate,
              OptimizerType=ens::SGD<ens::AdamUpdate,ens::NoDecay>,
              FunctionType=FullFunctionType,
              MatType=BaseMatType
          ]
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\callbacks\progress_bar.hpp(206,27): warning C4244: 'initializing': conversion from 'double' to 'const size_t', possible loss of data
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\callbacks\progress_bar.hpp(208,1): warning C4244: '+=': conversion from 'double' to 'size_t', possible loss of data
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\callbacks\progress_bar.hpp(224,67): warning C4244: 'initializing': conversion from 'double' to 'size_t', possible loss of data
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\callbacks\progress_bar.hpp(224,27): warning C4244: 'initializing': conversion from 'double' to 'const size_t', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\vr_class_reward_impl.hpp(42,26): warning C4244: 'initializing': conversion from 'eT' to 'size_t', possible loss of data
          with
          [
              eT=double
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\forward_visitor_impl.hpp(32): message : see reference to function template instantiation 'double mlpack::ann::VRClassReward<arma::mat,arma::mat>::Forward<arma::Mat<double>,arma::Mat<double>>(const InputType &&,const TargetType &&)' being compiled
          with
          [
              InputType=arma::Mat<double>,
              TargetType=arma::Mat<double>
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\forward_visitor_impl.hpp(32): message : see reference to function template instantiation 'double mlpack::ann::VRClassReward<arma::mat,arma::mat>::Forward<arma::Mat<double>,arma::Mat<double>>(const InputType &&,const TargetType &&)' being compiled
          with
          [
              InputType=arma::Mat<double>,
              TargetType=arma::Mat<double>
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(1028): message : see reference to function template instantiation 'void mlpack::ann::ForwardVisitor::operator ()<mlpack::ann::VRClassReward<arma::mat,arma::mat>>(LayerType *) const' being compiled
          with
          [
              LayerType=mlpack::ann::VRClassReward<arma::mat,arma::mat>
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(119): message : see reference to function template instantiation 'void boost::detail::variant::invoke_visitor<Visitor,false>::internal_visit<T&>(mlpack::ann::VRClassReward<arma::mat,arma::mat>*&,int)' being compiled
          with
          [
              Visitor=const mlpack::ann::ForwardVisitor,
              T=T8
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(117): message : see reference to function template instantiation 'void boost::detail::variant::invoke_visitor<Visitor,false>::internal_visit<T&>(mlpack::ann::VRClassReward<arma::mat,arma::mat>*&,int)' being compiled
          with
          [
              Visitor=const mlpack::ann::ForwardVisitor,
              T=T8
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(160): message : see reference to function template instantiation 'void boost::detail::variant::visitation_impl_invoke_impl<Visitor,VoidPtrCV,T>(int,Visitor &,VoidPtrCV,T *,boost::mpl::true_)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::ForwardVisitor,false>,
              VoidPtrCV=void *,
              T=T8
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(238): message : see reference to function template instantiation 'void boost::detail::variant::visitation_impl_invoke<Visitor,VoidPtrCV,T8,NoBackupFlag>(int,Visitor &,VoidPtrCV,T *,NoBackupFlag,int)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::ForwardVisitor,false>,
              VoidPtrCV=void *,
              NoBackupFlag=boost::variant<mlpack::ann::Recurrent<arma::mat,arma::mat> *,mlpack::ann::RecurrentAttention<arma::mat,arma::mat> *,mlpack::ann::ReinforceNormal<arma::mat,arma::mat> *,mlpack::ann::Reparametrization<arma::mat,arma::mat> *,mlpack::ann::Select<arma::mat,arma::mat> *,mlpack::ann::Sequential<arma::mat,arma::mat,false> *,mlpack::ann::Sequential<arma::mat,arma::mat,true> *,mlpack::ann::Subview<arma::mat,arma::mat> *,mlpack::ann::VRClassReward<arma::mat,arma::mat> *,mlpack::ann::VirtualBatchNorm<arma::mat,arma::mat> *>::has_fallback_type_,
              T=T8
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(2328): message : see reference to function template instantiation 'void boost::detail::variant::visitation_impl<first_which,first_step,Visitor,VoidPtrCV,boost::variant<mlpack::ann::Recurrent<arma::mat,arma::mat> *,mlpack::ann::RecurrentAttention<arma::mat,arma::mat> *,mlpack::ann::ReinforceNormal<arma::mat,arma::mat> *,mlpack::ann::Reparametrization<arma::mat,arma::mat> *,mlpack::ann::Select<arma::mat,arma::mat> *,mlpack::ann::Sequential<arma::mat,arma::mat,false> *,mlpack::ann::Sequential<arma::mat,arma::mat,true> *,mlpack::ann::Subview<arma::mat,arma::mat> *,mlpack::ann::VRClassReward<arma::mat,arma::mat> *,mlpack::ann::VirtualBatchNorm<arma::mat,arma::mat> *>::has_fallback_type_>(const int,const int,Visitor &,VoidPtrCV,boost::mpl::false_,NoBackupFlag,Which *,step0 *)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::ForwardVisitor,false>,
              VoidPtrCV=void *,
              NoBackupFlag=boost::variant<mlpack::ann::Recurrent<arma::mat,arma::mat> *,mlpack::ann::RecurrentAttention<arma::mat,arma::mat> *,mlpack::ann::ReinforceNormal<arma::mat,arma::mat> *,mlpack::ann::Reparametrization<arma::mat,arma::mat> *,mlpack::ann::Select<arma::mat,arma::mat> *,mlpack::ann::Sequential<arma::mat,arma::mat,false> *,mlpack::ann::Sequential<arma::mat,arma::mat,true> *,mlpack::ann::Subview<arma::mat,arma::mat> *,mlpack::ann::VRClassReward<arma::mat,arma::mat> *,mlpack::ann::VirtualBatchNorm<arma::mat,arma::mat> *>::has_fallback_type_,
              Which=first_which,
              step0=first_step
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(2348): message : see reference to function template instantiation 'void boost::variant<mlpack::ann::Recurrent<arma::mat,arma::mat> *,mlpack::ann::RecurrentAttention<arma::mat,arma::mat> *,mlpack::ann::ReinforceNormal<arma::mat,arma::mat> *,mlpack::ann::Reparametrization<arma::mat,arma::mat> *,mlpack::ann::Select<arma::mat,arma::mat> *,mlpack::ann::Sequential<arma::mat,arma::mat,false> *,mlpack::ann::Sequential<arma::mat,arma::mat,true> *,mlpack::ann::Subview<arma::mat,arma::mat> *,mlpack::ann::VRClassReward<arma::mat,arma::mat> *,mlpack::ann::VirtualBatchNorm<arma::mat,arma::mat> *>::internal_apply_visitor_impl<Visitor,void*>(int,int,Visitor &,VoidPtrCV)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::ForwardVisitor,false>,
              VoidPtrCV=void *
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(2349): message : see reference to function template instantiation 'void boost::variant<mlpack::ann::Recurrent<arma::mat,arma::mat> *,mlpack::ann::RecurrentAttention<arma::mat,arma::mat> *,mlpack::ann::ReinforceNormal<arma::mat,arma::mat> *,mlpack::ann::Reparametrization<arma::mat,arma::mat> *,mlpack::ann::Select<arma::mat,arma::mat> *,mlpack::ann::Sequential<arma::mat,arma::mat,false> *,mlpack::ann::Sequential<arma::mat,arma::mat,true> *,mlpack::ann::Subview<arma::mat,arma::mat> *,mlpack::ann::VRClassReward<arma::mat,arma::mat> *,mlpack::ann::VirtualBatchNorm<arma::mat,arma::mat> *>::internal_apply_visitor_impl<Visitor,void*>(int,int,Visitor &,VoidPtrCV)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::ForwardVisitor,false>,
              VoidPtrCV=void *
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(2391): message : see reference to function template instantiation 'void boost::variant<mlpack::ann::Recurrent<arma::mat,arma::mat> *,mlpack::ann::RecurrentAttention<arma::mat,arma::mat> *,mlpack::ann::ReinforceNormal<arma::mat,arma::mat> *,mlpack::ann::Reparametrization<arma::mat,arma::mat> *,mlpack::ann::Select<arma::mat,arma::mat> *,mlpack::ann::Sequential<arma::mat,arma::mat,false> *,mlpack::ann::Sequential<arma::mat,arma::mat,true> *,mlpack::ann::Subview<arma::mat,arma::mat> *,mlpack::ann::VRClassReward<arma::mat,arma::mat> *,mlpack::ann::VirtualBatchNorm<arma::mat,arma::mat> *>::internal_apply_visitor<boost::detail::variant::invoke_visitor<Visitor,false>>(boost::detail::variant::invoke_visitor<Visitor,false> &)' being compiled
          with
          [
              Visitor=const mlpack::ann::ForwardVisitor
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(2393): message : see reference to function template instantiation 'void boost::variant<mlpack::ann::Recurrent<arma::mat,arma::mat> *,mlpack::ann::RecurrentAttention<arma::mat,arma::mat> *,mlpack::ann::ReinforceNormal<arma::mat,arma::mat> *,mlpack::ann::Reparametrization<arma::mat,arma::mat> *,mlpack::ann::Select<arma::mat,arma::mat> *,mlpack::ann::Sequential<arma::mat,arma::mat,false> *,mlpack::ann::Sequential<arma::mat,arma::mat,true> *,mlpack::ann::Subview<arma::mat,arma::mat> *,mlpack::ann::VRClassReward<arma::mat,arma::mat> *,mlpack::ann::VirtualBatchNorm<arma::mat,arma::mat> *>::internal_apply_visitor<boost::detail::variant::invoke_visitor<Visitor,false>>(boost::detail::variant::invoke_visitor<Visitor,false> &)' being compiled
          with
          [
              Visitor=const mlpack::ann::ForwardVisitor
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\forward_visitor_impl.hpp(37): message : see reference to function template instantiation 'void boost::variant<mlpack::ann::Recurrent<arma::mat,arma::mat> *,mlpack::ann::RecurrentAttention<arma::mat,arma::mat> *,mlpack::ann::ReinforceNormal<arma::mat,arma::mat> *,mlpack::ann::Reparametrization<arma::mat,arma::mat> *,mlpack::ann::Select<arma::mat,arma::mat> *,mlpack::ann::Sequential<arma::mat,arma::mat,false> *,mlpack::ann::Sequential<arma::mat,arma::mat,true> *,mlpack::ann::Subview<arma::mat,arma::mat> *,mlpack::ann::VRClassReward<arma::mat,arma::mat> *,mlpack::ann::VirtualBatchNorm<arma::mat,arma::mat> *>::apply_visitor<const mlpack::ann::ForwardVisitor>(Visitor &) &' being compiled
          with
          [
              Visitor=const mlpack::ann::ForwardVisitor
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\forward_visitor_impl.hpp(37): message : see reference to function template instantiation 'void boost::variant<mlpack::ann::Recurrent<arma::mat,arma::mat> *,mlpack::ann::RecurrentAttention<arma::mat,arma::mat> *,mlpack::ann::ReinforceNormal<arma::mat,arma::mat> *,mlpack::ann::Reparametrization<arma::mat,arma::mat> *,mlpack::ann::Select<arma::mat,arma::mat> *,mlpack::ann::Sequential<arma::mat,arma::mat,false> *,mlpack::ann::Sequential<arma::mat,arma::mat,true> *,mlpack::ann::Subview<arma::mat,arma::mat> *,mlpack::ann::VRClassReward<arma::mat,arma::mat> *,mlpack::ann::VirtualBatchNorm<arma::mat,arma::mat> *>::apply_visitor<const mlpack::ann::ForwardVisitor>(Visitor &) &' being compiled
          with
          [
              Visitor=const mlpack::ann::ForwardVisitor
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\reparametrization_impl.hpp(84,44): warning C4244: 'argument': conversion from 'const arma::uword' to 'const double', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\backward_visitor_impl.hpp(63): message : see reference to function template instantiation 'void mlpack::ann::Reparametrization<arma::mat,arma::mat>::Backward<double>(const arma::Mat<double> &&,arma::Mat<double> &&,arma::Mat<double> &&)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\backward_visitor_impl.hpp(63): message : see reference to function template instantiation 'void mlpack::ann::Reparametrization<arma::mat,arma::mat>::Backward<double>(const arma::Mat<double> &&,arma::Mat<double> &&,arma::Mat<double> &&)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\backward_visitor_impl.hpp(50): message : see reference to function template instantiation 'void mlpack::ann::BackwardVisitor::LayerBackward<LayerType>(T *,arma::mat &) const' being compiled
          with
          [
              LayerType=mlpack::ann::Reparametrization<arma::mat,arma::mat>,
              T=mlpack::ann::Reparametrization<arma::mat,arma::mat>
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(1028): message : see reference to function template instantiation 'void mlpack::ann::BackwardVisitor::operator ()<mlpack::ann::Reparametrization<arma::mat,arma::mat>>(LayerType *) const' being compiled
          with
          [
              LayerType=mlpack::ann::Reparametrization<arma::mat,arma::mat>
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(119): message : see reference to function template instantiation 'void boost::detail::variant::invoke_visitor<Visitor,false>::internal_visit<T&>(mlpack::ann::Reparametrization<arma::mat,arma::mat>*&,int)' being compiled
          with
          [
              Visitor=const mlpack::ann::BackwardVisitor,
              T=T3
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(117): message : see reference to function template instantiation 'void boost::detail::variant::invoke_visitor<Visitor,false>::internal_visit<T&>(mlpack::ann::Reparametrization<arma::mat,arma::mat>*&,int)' being compiled
          with
          [
              Visitor=const mlpack::ann::BackwardVisitor,
              T=T3
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(160): message : see reference to function template instantiation 'void boost::detail::variant::visitation_impl_invoke_impl<Visitor,VoidPtrCV,T>(int,Visitor &,VoidPtrCV,T *,boost::mpl::true_)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::BackwardVisitor,false>,
              VoidPtrCV=void *,
              T=T3
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(238): message : see reference to function template instantiation 'void boost::detail::variant::visitation_impl_invoke<Visitor,VoidPtrCV,T3,NoBackupFlag>(int,Visitor &,VoidPtrCV,T *,NoBackupFlag,int)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::BackwardVisitor,false>,
              VoidPtrCV=void *,
              NoBackupFlag=boost::variant<mlpack::ann::Recurrent<arma::mat,arma::mat> *,mlpack::ann::RecurrentAttention<arma::mat,arma::mat> *,mlpack::ann::ReinforceNormal<arma::mat,arma::mat> *,mlpack::ann::Reparametrization<arma::mat,arma::mat> *,mlpack::ann::Select<arma::mat,arma::mat> *,mlpack::ann::Sequential<arma::mat,arma::mat,false> *,mlpack::ann::Sequential<arma::mat,arma::mat,true> *,mlpack::ann::Subview<arma::mat,arma::mat> *,mlpack::ann::VRClassReward<arma::mat,arma::mat> *,mlpack::ann::VirtualBatchNorm<arma::mat,arma::mat> *>::has_fallback_type_,
              T=T3
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(2328): message : see reference to function template instantiation 'void boost::detail::variant::visitation_impl<first_which,first_step,Visitor,VoidPtrCV,boost::variant<mlpack::ann::Recurrent<arma::mat,arma::mat> *,mlpack::ann::RecurrentAttention<arma::mat,arma::mat> *,mlpack::ann::ReinforceNormal<arma::mat,arma::mat> *,mlpack::ann::Reparametrization<arma::mat,arma::mat> *,mlpack::ann::Select<arma::mat,arma::mat> *,mlpack::ann::Sequential<arma::mat,arma::mat,false> *,mlpack::ann::Sequential<arma::mat,arma::mat,true> *,mlpack::ann::Subview<arma::mat,arma::mat> *,mlpack::ann::VRClassReward<arma::mat,arma::mat> *,mlpack::ann::VirtualBatchNorm<arma::mat,arma::mat> *>::has_fallback_type_>(const int,const int,Visitor &,VoidPtrCV,boost::mpl::false_,NoBackupFlag,Which *,step0 *)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::BackwardVisitor,false>,
              VoidPtrCV=void *,
              NoBackupFlag=boost::variant<mlpack::ann::Recurrent<arma::mat,arma::mat> *,mlpack::ann::RecurrentAttention<arma::mat,arma::mat> *,mlpack::ann::ReinforceNormal<arma::mat,arma::mat> *,mlpack::ann::Reparametrization<arma::mat,arma::mat> *,mlpack::ann::Select<arma::mat,arma::mat> *,mlpack::ann::Sequential<arma::mat,arma::mat,false> *,mlpack::ann::Sequential<arma::mat,arma::mat,true> *,mlpack::ann::Subview<arma::mat,arma::mat> *,mlpack::ann::VRClassReward<arma::mat,arma::mat> *,mlpack::ann::VirtualBatchNorm<arma::mat,arma::mat> *>::has_fallback_type_,
              Which=first_which,
              step0=first_step
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(2348): message : see reference to function template instantiation 'void boost::variant<mlpack::ann::Recurrent<arma::mat,arma::mat> *,mlpack::ann::RecurrentAttention<arma::mat,arma::mat> *,mlpack::ann::ReinforceNormal<arma::mat,arma::mat> *,mlpack::ann::Reparametrization<arma::mat,arma::mat> *,mlpack::ann::Select<arma::mat,arma::mat> *,mlpack::ann::Sequential<arma::mat,arma::mat,false> *,mlpack::ann::Sequential<arma::mat,arma::mat,true> *,mlpack::ann::Subview<arma::mat,arma::mat> *,mlpack::ann::VRClassReward<arma::mat,arma::mat> *,mlpack::ann::VirtualBatchNorm<arma::mat,arma::mat> *>::internal_apply_visitor_impl<Visitor,void*>(int,int,Visitor &,VoidPtrCV)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::BackwardVisitor,false>,
              VoidPtrCV=void *
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(2349): message : see reference to function template instantiation 'void boost::variant<mlpack::ann::Recurrent<arma::mat,arma::mat> *,mlpack::ann::RecurrentAttention<arma::mat,arma::mat> *,mlpack::ann::ReinforceNormal<arma::mat,arma::mat> *,mlpack::ann::Reparametrization<arma::mat,arma::mat> *,mlpack::ann::Select<arma::mat,arma::mat> *,mlpack::ann::Sequential<arma::mat,arma::mat,false> *,mlpack::ann::Sequential<arma::mat,arma::mat,true> *,mlpack::ann::Subview<arma::mat,arma::mat> *,mlpack::ann::VRClassReward<arma::mat,arma::mat> *,mlpack::ann::VirtualBatchNorm<arma::mat,arma::mat> *>::internal_apply_visitor_impl<Visitor,void*>(int,int,Visitor &,VoidPtrCV)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::BackwardVisitor,false>,
              VoidPtrCV=void *
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(2391): message : see reference to function template instantiation 'void boost::variant<mlpack::ann::Recurrent<arma::mat,arma::mat> *,mlpack::ann::RecurrentAttention<arma::mat,arma::mat> *,mlpack::ann::ReinforceNormal<arma::mat,arma::mat> *,mlpack::ann::Reparametrization<arma::mat,arma::mat> *,mlpack::ann::Select<arma::mat,arma::mat> *,mlpack::ann::Sequential<arma::mat,arma::mat,false> *,mlpack::ann::Sequential<arma::mat,arma::mat,true> *,mlpack::ann::Subview<arma::mat,arma::mat> *,mlpack::ann::VRClassReward<arma::mat,arma::mat> *,mlpack::ann::VirtualBatchNorm<arma::mat,arma::mat> *>::internal_apply_visitor<boost::detail::variant::invoke_visitor<Visitor,false>>(boost::detail::variant::invoke_visitor<Visitor,false> &)' being compiled
          with
          [
              Visitor=const mlpack::ann::BackwardVisitor
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(2393): message : see reference to function template instantiation 'void boost::variant<mlpack::ann::Recurrent<arma::mat,arma::mat> *,mlpack::ann::RecurrentAttention<arma::mat,arma::mat> *,mlpack::ann::ReinforceNormal<arma::mat,arma::mat> *,mlpack::ann::Reparametrization<arma::mat,arma::mat> *,mlpack::ann::Select<arma::mat,arma::mat> *,mlpack::ann::Sequential<arma::mat,arma::mat,false> *,mlpack::ann::Sequential<arma::mat,arma::mat,true> *,mlpack::ann::Subview<arma::mat,arma::mat> *,mlpack::ann::VRClassReward<arma::mat,arma::mat> *,mlpack::ann::VirtualBatchNorm<arma::mat,arma::mat> *>::internal_apply_visitor<boost::detail::variant::invoke_visitor<Visitor,false>>(boost::detail::variant::invoke_visitor<Visitor,false> &)' being compiled
          with
          [
              Visitor=const mlpack::ann::BackwardVisitor
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\backward_visitor_impl.hpp(55): message : see reference to function template instantiation 'void boost::variant<mlpack::ann::Recurrent<arma::mat,arma::mat> *,mlpack::ann::RecurrentAttention<arma::mat,arma::mat> *,mlpack::ann::ReinforceNormal<arma::mat,arma::mat> *,mlpack::ann::Reparametrization<arma::mat,arma::mat> *,mlpack::ann::Select<arma::mat,arma::mat> *,mlpack::ann::Sequential<arma::mat,arma::mat,false> *,mlpack::ann::Sequential<arma::mat,arma::mat,true> *,mlpack::ann::Subview<arma::mat,arma::mat> *,mlpack::ann::VRClassReward<arma::mat,arma::mat> *,mlpack::ann::VirtualBatchNorm<arma::mat,arma::mat> *>::apply_visitor<const mlpack::ann::BackwardVisitor>(Visitor &) &' being compiled
          with
          [
              Visitor=const mlpack::ann::BackwardVisitor
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\backward_visitor_impl.hpp(55): message : see reference to function template instantiation 'void boost::variant<mlpack::ann::Recurrent<arma::mat,arma::mat> *,mlpack::ann::RecurrentAttention<arma::mat,arma::mat> *,mlpack::ann::ReinforceNormal<arma::mat,arma::mat> *,mlpack::ann::Reparametrization<arma::mat,arma::mat> *,mlpack::ann::Select<arma::mat,arma::mat> *,mlpack::ann::Sequential<arma::mat,arma::mat,false> *,mlpack::ann::Sequential<arma::mat,arma::mat,true> *,mlpack::ann::Subview<arma::mat,arma::mat> *,mlpack::ann::VRClassReward<arma::mat,arma::mat> *,mlpack::ann::VirtualBatchNorm<arma::mat,arma::mat> *>::apply_visitor<const mlpack::ann::BackwardVisitor>(Visitor &) &' being compiled
          with
          [
              Visitor=const mlpack::ann::BackwardVisitor
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\vr_class_reward_impl.hpp(76,26): warning C4244: 'initializing': conversion from 'eT' to 'size_t', possible loss of data
          with
          [
              eT=double
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\backward_visitor_impl.hpp(63): message : see reference to function template instantiation 'void mlpack::ann::VRClassReward<arma::mat,arma::mat>::Backward<arma::Mat<double>,arma::Mat<double>,arma::Mat<double>>(const InputType &&,const TargetType &&,OutputType &&)' being compiled
          with
          [
              InputType=arma::Mat<double>,
              TargetType=arma::Mat<double>,
              OutputType=arma::Mat<double>
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\backward_visitor_impl.hpp(63): message : see reference to function template instantiation 'void mlpack::ann::VRClassReward<arma::mat,arma::mat>::Backward<arma::Mat<double>,arma::Mat<double>,arma::Mat<double>>(const InputType &&,const TargetType &&,OutputType &&)' being compiled
          with
          [
              InputType=arma::Mat<double>,
              TargetType=arma::Mat<double>,
              OutputType=arma::Mat<double>
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\backward_visitor_impl.hpp(50): message : see reference to function template instantiation 'void mlpack::ann::BackwardVisitor::LayerBackward<LayerType>(T *,arma::mat &) const' being compiled
          with
          [
              LayerType=mlpack::ann::VRClassReward<arma::mat,arma::mat>,
              T=mlpack::ann::VRClassReward<arma::mat,arma::mat>
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(1028): message : see reference to function template instantiation 'void mlpack::ann::BackwardVisitor::operator ()<mlpack::ann::VRClassReward<arma::mat,arma::mat>>(LayerType *) const' being compiled
          with
          [
              LayerType=mlpack::ann::VRClassReward<arma::mat,arma::mat>
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(119): message : see reference to function template instantiation 'void boost::detail::variant::invoke_visitor<Visitor,false>::internal_visit<T&>(mlpack::ann::VRClassReward<arma::mat,arma::mat>*&,int)' being compiled
          with
          [
              Visitor=const mlpack::ann::BackwardVisitor,
              T=T8
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(117): message : see reference to function template instantiation 'void boost::detail::variant::invoke_visitor<Visitor,false>::internal_visit<T&>(mlpack::ann::VRClassReward<arma::mat,arma::mat>*&,int)' being compiled
          with
          [
              Visitor=const mlpack::ann::BackwardVisitor,
              T=T8
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(160): message : see reference to function template instantiation 'void boost::detail::variant::visitation_impl_invoke_impl<Visitor,VoidPtrCV,T>(int,Visitor &,VoidPtrCV,T *,boost::mpl::true_)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::BackwardVisitor,false>,
              VoidPtrCV=void *,
              T=T8
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(238): message : see reference to function template instantiation 'void boost::detail::variant::visitation_impl_invoke<Visitor,VoidPtrCV,T8,NoBackupFlag>(int,Visitor &,VoidPtrCV,T *,NoBackupFlag,int)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::BackwardVisitor,false>,
              VoidPtrCV=void *,
              NoBackupFlag=boost::variant<mlpack::ann::Recurrent<arma::mat,arma::mat> *,mlpack::ann::RecurrentAttention<arma::mat,arma::mat> *,mlpack::ann::ReinforceNormal<arma::mat,arma::mat> *,mlpack::ann::Reparametrization<arma::mat,arma::mat> *,mlpack::ann::Select<arma::mat,arma::mat> *,mlpack::ann::Sequential<arma::mat,arma::mat,false> *,mlpack::ann::Sequential<arma::mat,arma::mat,true> *,mlpack::ann::Subview<arma::mat,arma::mat> *,mlpack::ann::VRClassReward<arma::mat,arma::mat> *,mlpack::ann::VirtualBatchNorm<arma::mat,arma::mat> *>::has_fallback_type_,
              T=T8
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\virtual_batch_norm_impl.hpp(107,49): warning C4244: 'argument': conversion from 'const arma::uword' to 'const double', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\backward_visitor_impl.hpp(63): message : see reference to function template instantiation 'void mlpack::ann::VirtualBatchNorm<arma::mat,arma::mat>::Backward<double>(const arma::Mat<double> &&,arma::Mat<double> &&,arma::Mat<double> &&)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\backward_visitor_impl.hpp(63): message : see reference to function template instantiation 'void mlpack::ann::VirtualBatchNorm<arma::mat,arma::mat>::Backward<double>(const arma::Mat<double> &&,arma::Mat<double> &&,arma::Mat<double> &&)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\backward_visitor_impl.hpp(50): message : see reference to function template instantiation 'void mlpack::ann::BackwardVisitor::LayerBackward<LayerType>(T *,arma::mat &) const' being compiled
          with
          [
              LayerType=mlpack::ann::VirtualBatchNorm<arma::mat,arma::mat>,
              T=mlpack::ann::VirtualBatchNorm<arma::mat,arma::mat>
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(1028): message : see reference to function template instantiation 'void mlpack::ann::BackwardVisitor::operator ()<mlpack::ann::VirtualBatchNorm<arma::mat,arma::mat>>(LayerType *) const' being compiled
          with
          [
              LayerType=mlpack::ann::VirtualBatchNorm<arma::mat,arma::mat>
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(119): message : see reference to function template instantiation 'void boost::detail::variant::invoke_visitor<Visitor,false>::internal_visit<T&>(mlpack::ann::VirtualBatchNorm<arma::mat,arma::mat>*&,int)' being compiled
          with
          [
              Visitor=const mlpack::ann::BackwardVisitor,
              T=T9
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(117): message : see reference to function template instantiation 'void boost::detail::variant::invoke_visitor<Visitor,false>::internal_visit<T&>(mlpack::ann::VirtualBatchNorm<arma::mat,arma::mat>*&,int)' being compiled
          with
          [
              Visitor=const mlpack::ann::BackwardVisitor,
              T=T9
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(160): message : see reference to function template instantiation 'void boost::detail::variant::visitation_impl_invoke_impl<Visitor,VoidPtrCV,T>(int,Visitor &,VoidPtrCV,T *,boost::mpl::true_)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::BackwardVisitor,false>,
              VoidPtrCV=void *,
              T=T9
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(238): message : see reference to function template instantiation 'void boost::detail::variant::visitation_impl_invoke<Visitor,VoidPtrCV,T9,NoBackupFlag>(int,Visitor &,VoidPtrCV,T *,NoBackupFlag,int)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::BackwardVisitor,false>,
              VoidPtrCV=void *,
              NoBackupFlag=boost::variant<mlpack::ann::Recurrent<arma::mat,arma::mat> *,mlpack::ann::RecurrentAttention<arma::mat,arma::mat> *,mlpack::ann::ReinforceNormal<arma::mat,arma::mat> *,mlpack::ann::Reparametrization<arma::mat,arma::mat> *,mlpack::ann::Select<arma::mat,arma::mat> *,mlpack::ann::Sequential<arma::mat,arma::mat,false> *,mlpack::ann::Sequential<arma::mat,arma::mat,true> *,mlpack::ann::Subview<arma::mat,arma::mat> *,mlpack::ann::VRClassReward<arma::mat,arma::mat> *,mlpack::ann::VirtualBatchNorm<arma::mat,arma::mat> *>::has_fallback_type_,
              T=T9
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\virtual_batch_norm_impl.hpp(112,52): warning C4244: 'argument': conversion from 'const arma::uword' to 'const double', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\batch_norm_impl.hpp(74,63): warning C4244: 'argument': conversion from 'size_t' to 'const double', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\forward_visitor_impl.hpp(32): message : see reference to function template instantiation 'void mlpack::ann::BatchNorm<arma::mat,arma::mat>::Forward<double>(const arma::Mat<double> &&,arma::Mat<double> &&)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\forward_visitor_impl.hpp(32): message : see reference to function template instantiation 'void mlpack::ann::BatchNorm<arma::mat,arma::mat>::Forward<double>(const arma::Mat<double> &&,arma::Mat<double> &&)' being compiled
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(1028): message : see reference to function template instantiation 'void mlpack::ann::ForwardVisitor::operator ()<mlpack::ann::BatchNorm<arma::mat,arma::mat>>(LayerType *) const' being compiled
          with
          [
              LayerType=mlpack::ann::BatchNorm<arma::mat,arma::mat>
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(119): message : see reference to function template instantiation 'void boost::detail::variant::invoke_visitor<Visitor,false>::internal_visit<T&>(mlpack::ann::BatchNorm<arma::mat,arma::mat>*&,int)' being compiled
          with
          [
              Visitor=const mlpack::ann::ForwardVisitor,
              T=T8
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(117): message : see reference to function template instantiation 'void boost::detail::variant::invoke_visitor<Visitor,false>::internal_visit<T&>(mlpack::ann::BatchNorm<arma::mat,arma::mat>*&,int)' being compiled
          with
          [
              Visitor=const mlpack::ann::ForwardVisitor,
              T=T8
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(160): message : see reference to function template instantiation 'void boost::detail::variant::visitation_impl_invoke_impl<Visitor,VoidPtrCV,T>(int,Visitor &,VoidPtrCV,T *,boost::mpl::true_)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::ForwardVisitor,false>,
              VoidPtrCV=void *,
              T=T8
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(238): message : see reference to function template instantiation 'void boost::detail::variant::visitation_impl_invoke<Visitor,VoidPtrCV,T8,NoBackupFlag>(int,Visitor &,VoidPtrCV,T *,NoBackupFlag,int)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::ForwardVisitor,false>,
              VoidPtrCV=void *,
              NoBackupFlag=boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>::has_fallback_type_,
              T=T8
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(2328): message : see reference to function template instantiation 'void boost::detail::variant::visitation_impl<first_which,first_step,Visitor,VoidPtrCV,boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>::has_fallback_type_>(const int,const int,Visitor &,VoidPtrCV,boost::mpl::false_,NoBackupFlag,Which *,step0 *)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::ForwardVisitor,false>,
              VoidPtrCV=void *,
              NoBackupFlag=boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>::has_fallback_type_,
              Which=first_which,
              step0=first_step
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(2348): message : see reference to function template instantiation 'void boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>::internal_apply_visitor_impl<Visitor,void*>(int,int,Visitor &,VoidPtrCV)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::ForwardVisitor,false>,
              VoidPtrCV=void *
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(2349): message : see reference to function template instantiation 'void boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>::internal_apply_visitor_impl<Visitor,void*>(int,int,Visitor &,VoidPtrCV)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::ForwardVisitor,false>,
              VoidPtrCV=void *
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(2391): message : see reference to function template instantiation 'void boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>::internal_apply_visitor<boost::detail::variant::invoke_visitor<Visitor,false>>(boost::detail::variant::invoke_visitor<Visitor,false> &)' being compiled
          with
          [
              Visitor=const mlpack::ann::ForwardVisitor
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(2393): message : see reference to function template instantiation 'void boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>::internal_apply_visitor<boost::detail::variant::invoke_visitor<Visitor,false>>(boost::detail::variant::invoke_visitor<Visitor,false> &)' being compiled
          with
          [
              Visitor=const mlpack::ann::ForwardVisitor
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\apply_visitor_unary.hpp(68): message : see reference to function template instantiation 'void boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>::apply_visitor<const Visitor>(Visitor &) &' being compiled
          with
          [
              Visitor=mlpack::ann::ForwardVisitor
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\apply_visitor_unary.hpp(68): message : see reference to function template instantiation 'void boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>::apply_visitor<const Visitor>(Visitor &) &' being compiled
          with
          [
              Visitor=mlpack::ann::ForwardVisitor
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\ffn_impl.hpp(411): message : see reference to function template instantiation 'void boost::apply_visitor<mlpack::ann::ForwardVisitor,_Ty&>(const Visitor &,Visitable)' being compiled
          with
          [
              _Ty=boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>,
              Visitor=mlpack::ann::ForwardVisitor,
              Visitable=boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes> &
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\ffn_impl.hpp(408): message : while compiling class template member function 'void mlpack::ann::FFN<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,mlpack::ann::RandomInitialization>::Forward(arma::mat &&)'
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\ffn_impl.hpp(192): message : see reference to function template instantiation 'void mlpack::ann::FFN<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,mlpack::ann::RandomInitialization>::Forward(arma::mat &&)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\ffn_impl.hpp(35): message : while compiling class template member function 'mlpack::ann::FFN<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,mlpack::ann::RandomInitialization>::FFN(OutputLayerType,InitializationRuleType)'
          with
          [
              OutputLayerType=mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,
              InitializationRuleType=mlpack::ann::RandomInitialization
          ]
C:\Dev\Assignments\A5_mlpack\mlpack_cnn_basic_redo\mnist_cnn\mnist_cnn\mnist_cnn\main.cpp(93): message : see reference to function template instantiation 'mlpack::ann::FFN<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,mlpack::ann::RandomInitialization>::FFN(OutputLayerType,InitializationRuleType)' being compiled
          with
          [
              OutputLayerType=mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,
              InitializationRuleType=mlpack::ann::RandomInitialization
          ]
C:\Dev\Assignments\A5_mlpack\mlpack_cnn_basic_redo\mnist_cnn\mnist_cnn\mnist_cnn\main.cpp(93): message : see reference to class template instantiation 'mlpack::ann::FFN<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,mlpack::ann::RandomInitialization>' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\batch_norm_impl.hpp(93,42): warning C4244: 'argument': conversion from 'size_t' to 'const double', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse_impl.hpp(67,22): warning C4244: 'initializing': conversion from 'double' to 'size_t', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\forward_visitor_impl.hpp(32): message : see reference to function template instantiation 'void mlpack::ann::Glimpse<arma::mat,arma::mat>::Forward<double>(const arma::Mat<double> &&,arma::Mat<double> &&)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\forward_visitor_impl.hpp(32): message : see reference to function template instantiation 'void mlpack::ann::Glimpse<arma::mat,arma::mat>::Forward<double>(const arma::Mat<double> &&,arma::Mat<double> &&)' being compiled
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(1028): message : see reference to function template instantiation 'void mlpack::ann::ForwardVisitor::operator ()<mlpack::ann::Glimpse<arma::mat,arma::mat>>(LayerType *) const' being compiled
          with
          [
              LayerType=mlpack::ann::Glimpse<arma::mat,arma::mat>
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(119): message : see reference to function template instantiation 'void boost::detail::variant::invoke_visitor<Visitor,false>::internal_visit<T&>(mlpack::ann::Glimpse<arma::mat,arma::mat>*&,int)' being compiled
          with
          [
              Visitor=const mlpack::ann::ForwardVisitor,
              T=T21
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(117): message : see reference to function template instantiation 'void boost::detail::variant::invoke_visitor<Visitor,false>::internal_visit<T&>(mlpack::ann::Glimpse<arma::mat,arma::mat>*&,int)' being compiled
          with
          [
              Visitor=const mlpack::ann::ForwardVisitor,
              T=T21
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(160): message : see reference to function template instantiation 'void boost::detail::variant::visitation_impl_invoke_impl<Visitor,VoidPtrCV,T>(int,Visitor &,VoidPtrCV,T *,boost::mpl::true_)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::ForwardVisitor,false>,
              VoidPtrCV=void *,
              T=T21
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(238): message : see reference to function template instantiation 'void boost::detail::variant::visitation_impl_invoke<Visitor,VoidPtrCV,T21,NoBackupFlag>(int,Visitor &,VoidPtrCV,T *,NoBackupFlag,int)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::ForwardVisitor,false>,
              VoidPtrCV=void *,
              NoBackupFlag=boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>::has_fallback_type_,
              T=T21
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\max_pooling_impl.hpp(66,29): warning C4244: '=': conversion from 'double' to 'size_t', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\forward_visitor_impl.hpp(32): message : see reference to function template instantiation 'void mlpack::ann::MaxPooling<arma::mat,arma::mat>::Forward<double>(const arma::Mat<double> &&,arma::Mat<double> &&)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\forward_visitor_impl.hpp(32): message : see reference to function template instantiation 'void mlpack::ann::MaxPooling<arma::mat,arma::mat>::Forward<double>(const arma::Mat<double> &&,arma::Mat<double> &&)' being compiled
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(1028): message : see reference to function template instantiation 'void mlpack::ann::ForwardVisitor::operator ()<mlpack::ann::MaxPooling<arma::mat,arma::mat>>(LayerType *) const' being compiled
          with
          [
              LayerType=mlpack::ann::MaxPooling<arma::mat,arma::mat>
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(119): message : see reference to function template instantiation 'void boost::detail::variant::invoke_visitor<Visitor,false>::internal_visit<T&>(mlpack::ann::MaxPooling<arma::mat,arma::mat>*&,int)' being compiled
          with
          [
              Visitor=const mlpack::ann::ForwardVisitor,
              T=T35
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(117): message : see reference to function template instantiation 'void boost::detail::variant::invoke_visitor<Visitor,false>::internal_visit<T&>(mlpack::ann::MaxPooling<arma::mat,arma::mat>*&,int)' being compiled
          with
          [
              Visitor=const mlpack::ann::ForwardVisitor,
              T=T35
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(160): message : see reference to function template instantiation 'void boost::detail::variant::visitation_impl_invoke_impl<Visitor,VoidPtrCV,T>(int,Visitor &,VoidPtrCV,T *,boost::mpl::true_)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::ForwardVisitor,false>,
              VoidPtrCV=void *,
              T=T35
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(238): message : see reference to function template instantiation 'void boost::detail::variant::visitation_impl_invoke<Visitor,VoidPtrCV,T35,NoBackupFlag>(int,Visitor &,VoidPtrCV,T *,NoBackupFlag,int)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::ForwardVisitor,false>,
              VoidPtrCV=void *,
              NoBackupFlag=boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>::has_fallback_type_,
              T=T35
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\max_pooling_impl.hpp(67,30): warning C4244: '=': conversion from 'double' to 'size_t', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\max_pooling_impl.hpp(72,28): warning C4244: '=': conversion from 'double' to 'size_t', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\max_pooling_impl.hpp(73,29): warning C4244: '=': conversion from 'double' to 'size_t', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\mean_pooling_impl.hpp(66,29): warning C4244: '=': conversion from 'double' to 'size_t', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\forward_visitor_impl.hpp(32): message : see reference to function template instantiation 'void mlpack::ann::MeanPooling<arma::mat,arma::mat>::Forward<double>(const arma::Mat<double> &&,arma::Mat<double> &&)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\forward_visitor_impl.hpp(32): message : see reference to function template instantiation 'void mlpack::ann::MeanPooling<arma::mat,arma::mat>::Forward<double>(const arma::Mat<double> &&,arma::Mat<double> &&)' being compiled
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(1028): message : see reference to function template instantiation 'void mlpack::ann::ForwardVisitor::operator ()<mlpack::ann::MeanPooling<arma::mat,arma::mat>>(LayerType *) const' being compiled
          with
          [
              LayerType=mlpack::ann::MeanPooling<arma::mat,arma::mat>
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(119): message : see reference to function template instantiation 'void boost::detail::variant::invoke_visitor<Visitor,false>::internal_visit<T&>(mlpack::ann::MeanPooling<arma::mat,arma::mat>*&,int)' being compiled
          with
          [
              Visitor=const mlpack::ann::ForwardVisitor,
              T=T36
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(117): message : see reference to function template instantiation 'void boost::detail::variant::invoke_visitor<Visitor,false>::internal_visit<T&>(mlpack::ann::MeanPooling<arma::mat,arma::mat>*&,int)' being compiled
          with
          [
              Visitor=const mlpack::ann::ForwardVisitor,
              T=T36
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(160): message : see reference to function template instantiation 'void boost::detail::variant::visitation_impl_invoke_impl<Visitor,VoidPtrCV,T>(int,Visitor &,VoidPtrCV,T *,boost::mpl::true_)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::ForwardVisitor,false>,
              VoidPtrCV=void *,
              T=T36
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(238): message : see reference to function template instantiation 'void boost::detail::variant::visitation_impl_invoke<Visitor,VoidPtrCV,T36,NoBackupFlag>(int,Visitor &,VoidPtrCV,T *,NoBackupFlag,int)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::ForwardVisitor,false>,
              VoidPtrCV=void *,
              NoBackupFlag=boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>::has_fallback_type_,
              T=T36
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\mean_pooling_impl.hpp(67,30): warning C4244: '=': conversion from 'double' to 'size_t', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\mean_pooling_impl.hpp(73,28): warning C4244: '=': conversion from 'double' to 'size_t', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\mean_pooling_impl.hpp(74,29): warning C4244: '=': conversion from 'double' to 'size_t', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\atrous_convolution.hpp(236,73): warning C4244: 'return': conversion from 'double' to 'size_t', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\atrous_convolution.hpp(235): message : while compiling class template member function 'size_t mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>::ConvOutSize(const size_t,const size_t,const size_t,const size_t,const size_t,const size_t)'
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\atrous_convolution_impl.hpp(225): message : see reference to function template instantiation 'size_t mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>::ConvOutSize(const size_t,const size_t,const size_t,const size_t,const size_t,const size_t)' being compiled
C:\vcpkg\installed\x64-windows\include\boost\type_traits\is_constructible.hpp(37): message : see reference to class template instantiation 'mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>' being compiled
C:\vcpkg\installed\x64-windows\include\boost\mpl\aux_\logical_op.hpp(136): message : see reference to class template instantiation 'boost::is_constructible<T1,T2>' being compiled
          with
          [
              T1=mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,
              T2=mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *&&
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(277): message : see reference to class template instantiation 'boost::mpl::or_<boost::is_constructible<T1,T2>,boost::is_constructible<T1,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *&>,boost::mpl::false_,boost::mpl::false_,boost::mpl::false_>' being compiled
          with
          [
              T1=mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,
              T2=mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *&&
          ]
C:\vcpkg\installed\x64-windows\include\boost\mpl\aux_\has_type.hpp(20): message : see reference to class template instantiation 'boost::detail::variant::is_constructible_ext<U1,U2>' being compiled
          with
          [
              U1=mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,
              U2=mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *&&
          ]
C:\vcpkg\installed\x64-windows\include\boost\mpl\aux_\has_type.hpp(20): message : while compiling class template member function 'boost::mpl::aux::yes_tag boost::mpl::aux::has_type<boost::detail::variant::is_constructible_ext<U1,U2>,boost::mpl::bool_<true>>::gcc_3_2_wknd::test(volatile const boost::mpl::aux::type_wrapper<U> *,boost::mpl::aux::type_wrapper<U::type> *)'
          with
          [
              U1=mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,
              U2=mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *&&
          ]
C:\vcpkg\installed\x64-windows\include\boost\mpl\quote.hpp(138): message : see reference to class template instantiation 'boost::mpl::aux::has_type<boost::detail::variant::is_constructible_ext<U1,U2>,boost::mpl::bool_<true>>' being compiled
          with
          [
              U1=mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,
              U2=mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *&&
          ]
C:\vcpkg\installed\x64-windows\include\boost\mpl\apply_wrap.hpp(145): message : see reference to class template instantiation 'boost::mpl::quote2<F,Tag>::apply<T1,T2>' being compiled
          with
          [
              F=boost::detail::variant::is_constructible_ext,
              Tag=boost::mpl::void_,
              T1=mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,
              T2=mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *&&
          ]
C:\vcpkg\installed\x64-windows\include\boost\mpl\bind.hpp(449): message : see reference to class template instantiation 'boost::mpl::apply_wrap2<boost::mpl::quote2<F,Tag>,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *&&>' being compiled
          with
          [
              F=boost::detail::variant::is_constructible_ext,
              Tag=boost::mpl::void_
          ]
C:\vcpkg\installed\x64-windows\include\boost\mpl\apply_wrap.hpp(145): message : see reference to class template instantiation 'boost::mpl::bind2<boost::mpl::quote2<F,Tag>,boost::mpl::arg<1>,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *&&>::apply<T1,boost::mpl::na,boost::mpl::na,boost::mpl::na,boost::mpl::na>' being compiled
          with
          [
              F=boost::detail::variant::is_constructible_ext,
              Tag=boost::mpl::void_,
              T1=mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *
          ]
C:\vcpkg\installed\x64-windows\include\boost\mpl\apply.hpp(154): message : see reference to class template instantiation 'boost::mpl::apply_wrap1<boost::mpl::protect<boost::mpl::bind2<boost::mpl::quote2<F,Tag>,boost::mpl::arg<1>,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *&&>,0>,T1>' being compiled
          with
          [
              F=boost::detail::variant::is_constructible_ext,
              Tag=boost::mpl::void_,
              T1=mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *
          ]
C:\vcpkg\installed\x64-windows\include\boost\mpl\aux_\iter_apply.hpp(28): message : see reference to class template instantiation 'boost::mpl::apply1<F,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *>' being compiled
          with
          [
              F=boost::detail::variant::is_constructible_ext<boost::mpl::_1,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *&&>
          ]
C:\vcpkg\installed\x64-windows\include\boost\mpl\not.hpp(41): message : see reference to class template instantiation 'boost::mpl::aux::iter_apply1<Predicate,Iterator>' being compiled
          with
          [
              Predicate=boost::detail::variant::is_constructible_ext<boost::mpl::_1,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *&&>,
              Iterator=boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<43>,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<42>,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<41>,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<40>,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<39>,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<38>,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<37>,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<36>,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<35>,mlpack::ann::Concat<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<34>,mlpack::ann::Concatenate<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<33>,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<32>,mlpack::ann::Constant<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<31>,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<30>,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<29>,mlpack::ann::DropConnect<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<28>,mlpack::ann::Dropout<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<27>,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<26>,mlpack::ann::ELU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<25>,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<24>,mlpack::ann::Glimpse<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<23>,mlpack::ann::HardTanH<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<22>,mlpack::ann::Highway<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<21>,mlpack::ann::Join<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<20>,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<19>,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<18>,mlpack::ann::CReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<17>,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,boost::mpl::l_item<boost::mpl::long_<16>,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,boost::mpl::l_item<boost::mpl::long_<15>,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<14>,mlpack::ann::Lookup<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<13>,mlpack::ann::LSTM<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<12>,mlpack::ann::GRU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<11>,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<10>,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<9>,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<8>,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<7>,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<6>,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<5>,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<4>,mlpack::ann::Padding<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<3>,mlpack::ann::PReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<2>,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<1>,mlpack::ann::MoreTypes,boost::mpl::l_end>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
          ]
C:\vcpkg\installed\x64-windows\include\boost\mpl\aux_\logical_op.hpp(72): message : see reference to class template instantiation 'boost::mpl::not_<boost::mpl::aux::iter_apply1<Predicate,Iterator>>' being compiled
          with
          [
              Predicate=boost::detail::variant::is_constructible_ext<boost::mpl::_1,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *&&>,
              Iterator=boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<43>,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<42>,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<41>,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<40>,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<39>,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<38>,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<37>,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<36>,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<35>,mlpack::ann::Concat<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<34>,mlpack::ann::Concatenate<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<33>,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<32>,mlpack::ann::Constant<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<31>,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<30>,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<29>,mlpack::ann::DropConnect<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<28>,mlpack::ann::Dropout<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<27>,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<26>,mlpack::ann::ELU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<25>,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<24>,mlpack::ann::Glimpse<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<23>,mlpack::ann::HardTanH<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<22>,mlpack::ann::Highway<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<21>,mlpack::ann::Join<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<20>,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<19>,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<18>,mlpack::ann::CReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<17>,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,boost::mpl::l_item<boost::mpl::long_<16>,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,boost::mpl::l_item<boost::mpl::long_<15>,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<14>,mlpack::ann::Lookup<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<13>,mlpack::ann::LSTM<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<12>,mlpack::ann::GRU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<11>,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<10>,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<9>,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<8>,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<7>,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<6>,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<5>,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<4>,mlpack::ann::Padding<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<3>,mlpack::ann::PReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<2>,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<1>,mlpack::ann::MoreTypes,boost::mpl::l_end>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
          ]
C:\vcpkg\installed\x64-windows\include\boost\mpl\aux_\logical_op.hpp(144): message : see reference to class template instantiation 'boost::mpl::aux::and_impl<true,T2,T3,T3,T5>' being compiled
          with
          [
              T2=boost::mpl::apply1<boost::mpl::protect<boost::mpl::aux::find_if_pred<boost::detail::variant::is_constructible_ext<boost::mpl::_1,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *&&>>,0>,boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<43>,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<42>,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<41>,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<40>,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<39>,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<38>,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<37>,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<36>,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<35>,mlpack::ann::Concat<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<34>,mlpack::ann::Concatenate<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<33>,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<32>,mlpack::ann::Constant<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<31>,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<30>,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<29>,mlpack::ann::DropConnect<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<28>,mlpack::ann::Dropout<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<27>,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<26>,mlpack::ann::ELU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<25>,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<24>,mlpack::ann::Glimpse<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<23>,mlpack::ann::HardTanH<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<22>,mlpack::ann::Highway<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<21>,mlpack::ann::Join<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<20>,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<19>,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<18>,mlpack::ann::CReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<17>,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,boost::mpl::l_item<boost::mpl::long_<16>,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,boost::mpl::l_item<boost::mpl::long_<15>,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<14>,mlpack::ann::Lookup<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<13>,mlpack::ann::LSTM<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<12>,mlpack::ann::GRU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<11>,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<10>,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<9>,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<8>,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<7>,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<6>,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<5>,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<4>,mlpack::ann::Padding<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<3>,mlpack::ann::PReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<2>,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<1>,mlpack::ann::MoreTypes,boost::mpl::l_end>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>,
              T3=boost::mpl::true_,
              T5=boost::mpl::true_
          ]
C:\vcpkg\installed\x64-windows\include\boost\mpl\iter_fold_if.hpp(46): message : see reference to class template instantiation 'boost::mpl::and_<boost::mpl::not_<boost::is_same<Iterator,LastIterator>>,boost::mpl::apply1<Predicate,Iterator>,boost::mpl::true_,boost::mpl::true_,boost::mpl::true_>' being compiled
          with
          [
              Iterator=boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<43>,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<42>,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<41>,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<40>,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<39>,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<38>,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<37>,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<36>,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<35>,mlpack::ann::Concat<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<34>,mlpack::ann::Concatenate<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<33>,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<32>,mlpack::ann::Constant<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<31>,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<30>,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<29>,mlpack::ann::DropConnect<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<28>,mlpack::ann::Dropout<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<27>,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<26>,mlpack::ann::ELU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<25>,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<24>,mlpack::ann::Glimpse<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<23>,mlpack::ann::HardTanH<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<22>,mlpack::ann::Highway<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<21>,mlpack::ann::Join<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<20>,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<19>,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<18>,mlpack::ann::CReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<17>,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,boost::mpl::l_item<boost::mpl::long_<16>,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,boost::mpl::l_item<boost::mpl::long_<15>,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<14>,mlpack::ann::Lookup<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<13>,mlpack::ann::LSTM<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<12>,mlpack::ann::GRU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<11>,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<10>,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<9>,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<8>,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<7>,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<6>,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<5>,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<4>,mlpack::ann::Padding<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<3>,mlpack::ann::PReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<2>,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<1>,mlpack::ann::MoreTypes,boost::mpl::l_end>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>,
              LastIterator=boost::mpl::l_iter<boost::mpl::l_end>,
              Predicate=boost::mpl::protect<boost::mpl::aux::find_if_pred<boost::detail::variant::is_constructible_ext<boost::mpl::_1,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *&&>>,0>
          ]
C:\vcpkg\installed\x64-windows\include\boost\mpl\apply_wrap.hpp(145): message : see reference to class template instantiation 'boost::mpl::aux::iter_fold_if_pred<ForwardPredicate,boost::mpl::l_iter<boost::mpl::l_end>>::apply<T1,T2>' being compiled
          with
          [
              ForwardPredicate=boost::mpl::protect<boost::mpl::aux::find_if_pred<boost::detail::variant::is_constructible_ext<boost::mpl::_1,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *&&>>,0>,
              T1=void,
              T2=boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<43>,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<42>,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<41>,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<40>,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<39>,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<38>,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<37>,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<36>,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<35>,mlpack::ann::Concat<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<34>,mlpack::ann::Concatenate<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<33>,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<32>,mlpack::ann::Constant<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<31>,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<30>,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<29>,mlpack::ann::DropConnect<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<28>,mlpack::ann::Dropout<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<27>,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<26>,mlpack::ann::ELU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<25>,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<24>,mlpack::ann::Glimpse<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<23>,mlpack::ann::HardTanH<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<22>,mlpack::ann::Highway<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<21>,mlpack::ann::Join<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<20>,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<19>,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<18>,mlpack::ann::CReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<17>,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,boost::mpl::l_item<boost::mpl::long_<16>,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,boost::mpl::l_item<boost::mpl::long_<15>,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<14>,mlpack::ann::Lookup<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<13>,mlpack::ann::LSTM<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<12>,mlpack::ann::GRU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<11>,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<10>,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<9>,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<8>,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<7>,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<6>,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<5>,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<4>,mlpack::ann::Padding<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<3>,mlpack::ann::PReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<2>,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<1>,mlpack::ann::MoreTypes,boost::mpl::l_end>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
          ]
C:\vcpkg\installed\x64-windows\include\boost\mpl\apply.hpp(154): message : see reference to class template instantiation 'boost::mpl::apply_wrap2<boost::mpl::protect<boost::mpl::aux::iter_fold_if_pred<ForwardPredicate,boost::mpl::l_iter<boost::mpl::l_end>>,0>,T1,T2>' being compiled
          with
          [
              ForwardPredicate=boost::mpl::protect<boost::mpl::aux::find_if_pred<boost::detail::variant::is_constructible_ext<boost::mpl::_1,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *&&>>,0>,
              T1=void,
              T2=boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<43>,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<42>,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<41>,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<40>,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<39>,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<38>,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<37>,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<36>,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<35>,mlpack::ann::Concat<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<34>,mlpack::ann::Concatenate<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<33>,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<32>,mlpack::ann::Constant<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<31>,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<30>,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<29>,mlpack::ann::DropConnect<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<28>,mlpack::ann::Dropout<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<27>,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<26>,mlpack::ann::ELU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<25>,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<24>,mlpack::ann::Glimpse<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<23>,mlpack::ann::HardTanH<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<22>,mlpack::ann::Highway<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<21>,mlpack::ann::Join<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<20>,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<19>,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<18>,mlpack::ann::CReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<17>,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,boost::mpl::l_item<boost::mpl::long_<16>,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,boost::mpl::l_item<boost::mpl::long_<15>,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<14>,mlpack::ann::Lookup<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<13>,mlpack::ann::LSTM<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<12>,mlpack::ann::GRU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<11>,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<10>,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<9>,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<8>,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<7>,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<6>,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<5>,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<4>,mlpack::ann::Padding<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<3>,mlpack::ann::PReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<2>,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<1>,mlpack::ann::MoreTypes,boost::mpl::l_end>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
          ]
C:\vcpkg\installed\x64-windows\include\boost\mpl\aux_\iter_fold_if_impl.hpp(95): message : see reference to class template instantiation 'boost::mpl::apply2<Predicate,State,Iterator>' being compiled
          with
          [
              Predicate=boost::mpl::protect<boost::mpl::aux::iter_fold_if_pred<boost::mpl::protect<boost::mpl::aux::find_if_pred<boost::detail::variant::is_constructible_ext<boost::mpl::_1,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *&&>>,0>,boost::mpl::l_iter<boost::mpl::l_end>>,0>,
              State=void,
              Iterator=boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<43>,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<42>,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<41>,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<40>,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<39>,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<38>,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<37>,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<36>,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<35>,mlpack::ann::Concat<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<34>,mlpack::ann::Concatenate<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<33>,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<32>,mlpack::ann::Constant<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<31>,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<30>,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<29>,mlpack::ann::DropConnect<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<28>,mlpack::ann::Dropout<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<27>,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<26>,mlpack::ann::ELU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<25>,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<24>,mlpack::ann::Glimpse<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<23>,mlpack::ann::HardTanH<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<22>,mlpack::ann::Highway<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<21>,mlpack::ann::Join<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<20>,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<19>,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<18>,mlpack::ann::CReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<17>,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,boost::mpl::l_item<boost::mpl::long_<16>,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,boost::mpl::l_item<boost::mpl::long_<15>,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<14>,mlpack::ann::Lookup<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<13>,mlpack::ann::LSTM<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<12>,mlpack::ann::GRU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<11>,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<10>,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<9>,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<8>,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<7>,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<6>,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<5>,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<4>,mlpack::ann::Padding<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<3>,mlpack::ann::PReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<2>,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<1>,mlpack::ann::MoreTypes,boost::mpl::l_end>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
          ]
C:\vcpkg\installed\x64-windows\include\boost\mpl\aux_\iter_fold_if_impl.hpp(172): message : see reference to class template instantiation 'boost::mpl::aux::iter_fold_if_forward_step<boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<43>,T,boost::mpl::l_item<boost::mpl::long_<42>,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<41>,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<40>,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<39>,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<38>,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<37>,mlpack::ann::BatchNorm<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<36>,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<35>,mlpack::ann::Concat<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<34>,mlpack::ann::Concatenate<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<33>,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<32>,mlpack::ann::Constant<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<31>,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<30>,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<29>,mlpack::ann::DropConnect<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<28>,mlpack::ann::Dropout<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<27>,mlpack::ann::AlphaDropout<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<26>,mlpack::ann::ELU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<25>,mlpack::ann::FlexibleReLU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<24>,mlpack::ann::Glimpse<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<23>,mlpack::ann::HardTanH<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<22>,mlpack::ann::Highway<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<21>,mlpack::ann::Join<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<20>,mlpack::ann::LayerNorm<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<19>,mlpack::ann::LeakyReLU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<18>,mlpack::ann::CReLU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<17>,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer>*,boost::mpl::l_item<boost::mpl::long_<16>,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer>*,boost::mpl::l_item<boost::mpl::long_<15>,mlpack::ann::LogSoftMax<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<14>,mlpack::ann::Lookup<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<13>,mlpack::ann::LSTM<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<12>,mlpack::ann::GRU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<11>,mlpack::ann::FastLSTM<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<10>,mlpack::ann::MaxPooling<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<9>,mlpack::ann::MeanPooling<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<8>,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<7>,mlpack::ann::MultiplyConstant<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<6>,mlpack::ann::MultiplyMerge<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<5>,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<4>,mlpack::ann::Padding<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<3>,mlpack::ann::PReLU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<2>,mlpack::ann::WeightNorm<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<1>,T0,boost::mpl::l_end>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>,void,ForwardOp,ForwardPredicate>' being compiled
          with
          [
              T=mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,
              T0=mlpack::ann::MoreTypes,
              ForwardOp=boost::mpl::arg<1>,
              ForwardPredicate=boost::mpl::protect<boost::mpl::aux::iter_fold_if_pred<boost::mpl::protect<boost::mpl::aux::find_if_pred<boost::detail::variant::is_constructible_ext<boost::mpl::_1,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *&&>>,0>,boost::mpl::l_iter<boost::mpl::l_end>>,0>
          ]
C:\vcpkg\installed\x64-windows\include\boost\mpl\iter_fold_if.hpp(94): message : see reference to class template instantiation 'boost::mpl::aux::iter_fold_if_impl<boost::mpl::l_iter<boost::mpl::l_item<boost::mpl::long_<45>,T,boost::mpl::l_item<boost::mpl::long_<44>,mlpack::ann::AddMerge<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<43>,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<42>,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<41>,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<40>,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<39>,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<38>,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<37>,mlpack::ann::BatchNorm<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<36>,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<35>,mlpack::ann::Concat<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<34>,mlpack::ann::Concatenate<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<33>,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<32>,mlpack::ann::Constant<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<31>,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<30>,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<29>,mlpack::ann::DropConnect<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<28>,mlpack::ann::Dropout<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<27>,mlpack::ann::AlphaDropout<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<26>,mlpack::ann::ELU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<25>,mlpack::ann::FlexibleReLU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<24>,mlpack::ann::Glimpse<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<23>,mlpack::ann::HardTanH<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<22>,mlpack::ann::Highway<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<21>,mlpack::ann::Join<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<20>,mlpack::ann::LayerNorm<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<19>,mlpack::ann::LeakyReLU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<18>,mlpack::ann::CReLU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<17>,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer>*,boost::mpl::l_item<boost::mpl::long_<16>,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer>*,boost::mpl::l_item<boost::mpl::long_<15>,mlpack::ann::LogSoftMax<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<14>,mlpack::ann::Lookup<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<13>,mlpack::ann::LSTM<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<12>,mlpack::ann::GRU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<11>,mlpack::ann::FastLSTM<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<10>,mlpack::ann::MaxPooling<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<9>,mlpack::ann::MeanPooling<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<8>,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<7>,mlpack::ann::MultiplyConstant<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<6>,mlpack::ann::MultiplyMerge<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<5>,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<4>,mlpack::ann::Padding<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<3>,mlpack::ann::PReLU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<2>,mlpack::ann::WeightNorm<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<1>,T0,boost::mpl::l_end>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>,State,ForwardOp,boost::mpl::protect<boost::mpl::aux::iter_fold_if_pred<ForwardPredicate,boost::mpl::l_iter<boost::mpl::l_end>>,0>,BackwardOp,boost::mpl::always<boost::mpl::false_>>' being compiled
          with
          [
              T=mlpack::ann::Add<arma::mat,arma::mat> *,
              T0=mlpack::ann::MoreTypes,
              State=void,
              ForwardOp=boost::mpl::arg<1>,
              ForwardPredicate=boost::mpl::protect<boost::mpl::aux::find_if_pred<boost::detail::variant::is_constructible_ext<boost::mpl::_1,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *&&>>,0>,
              BackwardOp=boost::mpl::na
          ]
C:\vcpkg\installed\x64-windows\include\boost\mpl\iter_fold_if.hpp(102): message : see reference to class template instantiation 'boost::mpl::iter_fold_if<Sequence,void,boost::mpl::arg<1>,boost::mpl::protect<boost::mpl::aux::find_if_pred<Predicate>,0>,boost::mpl::na,boost::mpl::na>::result_' being compiled
          with
          [
              Sequence=boost::mpl::l_item<boost::mpl::long_<45>,mlpack::ann::Add<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<44>,mlpack::ann::AddMerge<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<43>,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<42>,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<41>,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<40>,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<39>,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<38>,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<37>,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<36>,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<35>,mlpack::ann::Concat<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<34>,mlpack::ann::Concatenate<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<33>,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<32>,mlpack::ann::Constant<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<31>,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<30>,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<29>,mlpack::ann::DropConnect<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<28>,mlpack::ann::Dropout<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<27>,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<26>,mlpack::ann::ELU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<25>,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<24>,mlpack::ann::Glimpse<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<23>,mlpack::ann::HardTanH<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<22>,mlpack::ann::Highway<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<21>,mlpack::ann::Join<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<20>,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<19>,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<18>,mlpack::ann::CReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<17>,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,boost::mpl::l_item<boost::mpl::long_<16>,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,boost::mpl::l_item<boost::mpl::long_<15>,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<14>,mlpack::ann::Lookup<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<13>,mlpack::ann::LSTM<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<12>,mlpack::ann::GRU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<11>,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<10>,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<9>,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<8>,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<7>,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<6>,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<5>,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<4>,mlpack::ann::Padding<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<3>,mlpack::ann::PReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<2>,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<1>,mlpack::ann::MoreTypes,boost::mpl::l_end>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>,
              Predicate=boost::detail::variant::is_constructible_ext<boost::mpl::_1,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *&&>
          ]
C:\vcpkg\installed\x64-windows\include\boost\mpl\find_if.hpp(39): message : see reference to class template instantiation 'boost::mpl::iter_fold_if<Sequence,void,boost::mpl::arg<1>,boost::mpl::protect<boost::mpl::aux::find_if_pred<Predicate>,0>,boost::mpl::na,boost::mpl::na>' being compiled
          with
          [
              Sequence=boost::mpl::l_item<boost::mpl::long_<45>,mlpack::ann::Add<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<44>,mlpack::ann::AddMerge<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<43>,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<42>,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<41>,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<40>,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<39>,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<38>,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<37>,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<36>,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<35>,mlpack::ann::Concat<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<34>,mlpack::ann::Concatenate<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<33>,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<32>,mlpack::ann::Constant<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<31>,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<30>,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<29>,mlpack::ann::DropConnect<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<28>,mlpack::ann::Dropout<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<27>,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<26>,mlpack::ann::ELU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<25>,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<24>,mlpack::ann::Glimpse<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<23>,mlpack::ann::HardTanH<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<22>,mlpack::ann::Highway<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<21>,mlpack::ann::Join<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<20>,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<19>,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<18>,mlpack::ann::CReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<17>,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,boost::mpl::l_item<boost::mpl::long_<16>,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,boost::mpl::l_item<boost::mpl::long_<15>,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<14>,mlpack::ann::Lookup<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<13>,mlpack::ann::LSTM<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<12>,mlpack::ann::GRU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<11>,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<10>,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<9>,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<8>,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<7>,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<6>,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<5>,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<4>,mlpack::ann::Padding<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<3>,mlpack::ann::PReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<2>,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<1>,mlpack::ann::MoreTypes,boost::mpl::l_end>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>,
              Predicate=boost::detail::variant::is_constructible_ext<boost::mpl::_1,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *&&>
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(285): message : see reference to class template instantiation 'boost::mpl::find_if<Types,boost::detail::variant::is_constructible_ext<boost::mpl::_1,T>>' being compiled
          with
          [
              Types=boost::mpl::l_item<boost::mpl::long_<45>,mlpack::ann::Add<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<44>,mlpack::ann::AddMerge<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<43>,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<42>,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<41>,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<40>,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<39>,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<38>,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<37>,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<36>,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<35>,mlpack::ann::Concat<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<34>,mlpack::ann::Concatenate<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<33>,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<32>,mlpack::ann::Constant<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<31>,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<30>,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<29>,mlpack::ann::DropConnect<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<28>,mlpack::ann::Dropout<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<27>,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<26>,mlpack::ann::ELU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<25>,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<24>,mlpack::ann::Glimpse<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<23>,mlpack::ann::HardTanH<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<22>,mlpack::ann::Highway<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<21>,mlpack::ann::Join<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<20>,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<19>,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<18>,mlpack::ann::CReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<17>,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,boost::mpl::l_item<boost::mpl::long_<16>,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,boost::mpl::l_item<boost::mpl::long_<15>,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<14>,mlpack::ann::Lookup<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<13>,mlpack::ann::LSTM<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<12>,mlpack::ann::GRU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<11>,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<10>,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<9>,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<8>,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<7>,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<6>,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<5>,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<4>,mlpack::ann::Padding<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<3>,mlpack::ann::PReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<2>,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<1>,mlpack::ann::MoreTypes,boost::mpl::l_end>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>,
              T=mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *&&
          ]
C:\vcpkg\installed\x64-windows\include\boost\mpl\aux_\logical_op.hpp(72): message : see reference to class template instantiation 'boost::detail::variant::is_variant_constructible_from<LayerType *&&,boost::mpl::l_item<boost::mpl::long_<45>,T,boost::mpl::l_item<boost::mpl::long_<44>,mlpack::ann::AddMerge<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<43>,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<42>,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<41>,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<40>,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<39>,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<38>,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<37>,mlpack::ann::BatchNorm<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<36>,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<35>,mlpack::ann::Concat<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<34>,mlpack::ann::Concatenate<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<33>,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<32>,mlpack::ann::Constant<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<31>,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<30>,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<29>,mlpack::ann::DropConnect<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<28>,mlpack::ann::Dropout<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<27>,mlpack::ann::AlphaDropout<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<26>,mlpack::ann::ELU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<25>,mlpack::ann::FlexibleReLU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<24>,mlpack::ann::Glimpse<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<23>,mlpack::ann::HardTanH<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<22>,mlpack::ann::Highway<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<21>,mlpack::ann::Join<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<20>,mlpack::ann::LayerNorm<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<19>,mlpack::ann::LeakyReLU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<18>,mlpack::ann::CReLU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<17>,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer>*,boost::mpl::l_item<boost::mpl::long_<16>,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer>*,boost::mpl::l_item<boost::mpl::long_<15>,mlpack::ann::LogSoftMax<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<14>,mlpack::ann::Lookup<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<13>,mlpack::ann::LSTM<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<12>,mlpack::ann::GRU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<11>,mlpack::ann::FastLSTM<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<10>,mlpack::ann::MaxPooling<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<9>,mlpack::ann::MeanPooling<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<8>,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<7>,mlpack::ann::MultiplyConstant<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<6>,mlpack::ann::MultiplyMerge<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<5>,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<4>,mlpack::ann::Padding<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<3>,mlpack::ann::PReLU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<2>,mlpack::ann::WeightNorm<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<1>,T0,boost::mpl::l_end>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>' being compiled
          with
          [
              LayerType=mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>,
              T=mlpack::ann::Add<arma::mat,arma::mat> *,
              T0=mlpack::ann::MoreTypes
          ]
C:\vcpkg\installed\x64-windows\include\boost\mpl\aux_\logical_op.hpp(76): message : see reference to class template instantiation 'boost::mpl::aux::and_impl<true,T2,T3,T3,boost::mpl::true_>' being compiled
          with
          [
              T2=boost::detail::variant::is_variant_constructible_from<mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *&&,boost::mpl::l_item<boost::mpl::long_<45>,mlpack::ann::Add<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<44>,mlpack::ann::AddMerge<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<43>,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<42>,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<41>,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<40>,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<39>,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<38>,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<37>,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<36>,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<35>,mlpack::ann::Concat<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<34>,mlpack::ann::Concatenate<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<33>,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<32>,mlpack::ann::Constant<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<31>,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<30>,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<29>,mlpack::ann::DropConnect<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<28>,mlpack::ann::Dropout<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<27>,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<26>,mlpack::ann::ELU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<25>,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<24>,mlpack::ann::Glimpse<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<23>,mlpack::ann::HardTanH<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<22>,mlpack::ann::Highway<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<21>,mlpack::ann::Join<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<20>,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<19>,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<18>,mlpack::ann::CReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<17>,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,boost::mpl::l_item<boost::mpl::long_<16>,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,boost::mpl::l_item<boost::mpl::long_<15>,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<14>,mlpack::ann::Lookup<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<13>,mlpack::ann::LSTM<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<12>,mlpack::ann::GRU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<11>,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<10>,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<9>,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<8>,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<7>,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<6>,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<5>,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<4>,mlpack::ann::Padding<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<3>,mlpack::ann::PReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<2>,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<1>,mlpack::ann::MoreTypes,boost::mpl::l_end>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>,
              T3=boost::mpl::true_
          ]
C:\vcpkg\installed\x64-windows\include\boost\mpl\aux_\logical_op.hpp(76): message : see reference to class template instantiation 'boost::mpl::aux::and_impl<true,T2,T3,T4,T4>' being compiled
          with
          [
              T2=boost::mpl::not_<boost::is_same<mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>>>,
              T3=boost::detail::variant::is_variant_constructible_from<mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *&&,boost::mpl::l_item<boost::mpl::long_<45>,mlpack::ann::Add<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<44>,mlpack::ann::AddMerge<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<43>,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<42>,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<41>,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<40>,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<39>,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<38>,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<37>,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<36>,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<35>,mlpack::ann::Concat<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<34>,mlpack::ann::Concatenate<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<33>,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<32>,mlpack::ann::Constant<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<31>,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<30>,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<29>,mlpack::ann::DropConnect<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<28>,mlpack::ann::Dropout<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<27>,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<26>,mlpack::ann::ELU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<25>,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<24>,mlpack::ann::Glimpse<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<23>,mlpack::ann::HardTanH<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<22>,mlpack::ann::Highway<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<21>,mlpack::ann::Join<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<20>,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<19>,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<18>,mlpack::ann::CReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<17>,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,boost::mpl::l_item<boost::mpl::long_<16>,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,boost::mpl::l_item<boost::mpl::long_<15>,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<14>,mlpack::ann::Lookup<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<13>,mlpack::ann::LSTM<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<12>,mlpack::ann::GRU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<11>,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<10>,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<9>,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<8>,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<7>,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<6>,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<5>,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<4>,mlpack::ann::Padding<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<3>,mlpack::ann::PReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<2>,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<1>,mlpack::ann::MoreTypes,boost::mpl::l_end>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>,
              T4=boost::mpl::true_
          ]
C:\vcpkg\installed\x64-windows\include\boost\mpl\aux_\logical_op.hpp(144): message : see reference to class template instantiation 'boost::mpl::aux::and_impl<true,T2,T3,T4,T5>' being compiled
          with
          [
              T2=boost::mpl::not_<boost::is_const<mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *>>,
              T3=boost::mpl::not_<boost::is_same<mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>>>,
              T4=boost::detail::variant::is_variant_constructible_from<mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *&&,boost::mpl::l_item<boost::mpl::long_<45>,mlpack::ann::Add<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<44>,mlpack::ann::AddMerge<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<43>,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<42>,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<41>,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<40>,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<39>,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<38>,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<37>,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<36>,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<35>,mlpack::ann::Concat<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<34>,mlpack::ann::Concatenate<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<33>,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<32>,mlpack::ann::Constant<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<31>,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<30>,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<29>,mlpack::ann::DropConnect<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<28>,mlpack::ann::Dropout<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<27>,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<26>,mlpack::ann::ELU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<25>,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<24>,mlpack::ann::Glimpse<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<23>,mlpack::ann::HardTanH<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<22>,mlpack::ann::Highway<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<21>,mlpack::ann::Join<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<20>,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<19>,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<18>,mlpack::ann::CReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<17>,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,boost::mpl::l_item<boost::mpl::long_<16>,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,boost::mpl::l_item<boost::mpl::long_<15>,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<14>,mlpack::ann::Lookup<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<13>,mlpack::ann::LSTM<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<12>,mlpack::ann::GRU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<11>,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<10>,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<9>,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<8>,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<7>,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<6>,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<5>,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<4>,mlpack::ann::Padding<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<3>,mlpack::ann::PReLU<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<2>,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,boost::mpl::l_item<boost::mpl::long_<1>,mlpack::ann::MoreTypes,boost::mpl::l_end>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>,
              T5=boost::mpl::true_
          ]
C:\vcpkg\installed\x64-windows\include\boost\mpl\aux_\logical_op.hpp(136): message : see reference to class template instantiation 'boost::mpl::and_<boost::is_rvalue_reference<LayerType *&&>,boost::mpl::not_<boost::is_const<LayerType *>>,boost::mpl::not_<boost::is_same<LayerType *,boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>>>,boost::detail::variant::is_variant_constructible_from<LayerType *&&,boost::mpl::l_item<boost::mpl::long_<45>,T,boost::mpl::l_item<boost::mpl::long_<44>,mlpack::ann::AddMerge<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<43>,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<42>,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<41>,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<40>,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<39>,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<38>,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<37>,mlpack::ann::BatchNorm<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<36>,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<35>,mlpack::ann::Concat<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<34>,mlpack::ann::Concatenate<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<33>,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<32>,mlpack::ann::Constant<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<31>,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<30>,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<29>,mlpack::ann::DropConnect<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<28>,mlpack::ann::Dropout<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<27>,mlpack::ann::AlphaDropout<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<26>,mlpack::ann::ELU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<25>,mlpack::ann::FlexibleReLU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<24>,mlpack::ann::Glimpse<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<23>,mlpack::ann::HardTanH<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<22>,mlpack::ann::Highway<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<21>,mlpack::ann::Join<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<20>,mlpack::ann::LayerNorm<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<19>,mlpack::ann::LeakyReLU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<18>,mlpack::ann::CReLU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<17>,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer>*,boost::mpl::l_item<boost::mpl::long_<16>,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer>*,boost::mpl::l_item<boost::mpl::long_<15>,mlpack::ann::LogSoftMax<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<14>,mlpack::ann::Lookup<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<13>,mlpack::ann::LSTM<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<12>,mlpack::ann::GRU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<11>,mlpack::ann::FastLSTM<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<10>,mlpack::ann::MaxPooling<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<9>,mlpack::ann::MeanPooling<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<8>,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<7>,mlpack::ann::MultiplyConstant<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<6>,mlpack::ann::MultiplyMerge<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<5>,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<4>,mlpack::ann::Padding<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<3>,mlpack::ann::PReLU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<2>,mlpack::ann::WeightNorm<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<1>,T0,boost::mpl::l_end>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>,boost::mpl::true_>' being compiled
          with
          [
              LayerType=mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>,
              T=mlpack::ann::Add<arma::mat,arma::mat> *,
              T0=mlpack::ann::MoreTypes
          ]
C:\vcpkg\installed\x64-windows\include\boost\core\enable_if.hpp(41): message : see reference to class template instantiation 'boost::mpl::or_<boost::mpl::and_<boost::is_rvalue_reference<LayerType *&&>,boost::mpl::not_<boost::is_const<LayerType *>>,boost::mpl::not_<boost::is_same<LayerType *,boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>>>,boost::detail::variant::is_variant_constructible_from<LayerType *&&,boost::mpl::l_item<boost::mpl::long_<45>,T,boost::mpl::l_item<boost::mpl::long_<44>,mlpack::ann::AddMerge<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<43>,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<42>,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<41>,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<40>,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<39>,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<38>,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<37>,mlpack::ann::BatchNorm<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<36>,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<35>,mlpack::ann::Concat<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<34>,mlpack::ann::Concatenate<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<33>,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<32>,mlpack::ann::Constant<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<31>,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<30>,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<29>,mlpack::ann::DropConnect<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<28>,mlpack::ann::Dropout<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<27>,mlpack::ann::AlphaDropout<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<26>,mlpack::ann::ELU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<25>,mlpack::ann::FlexibleReLU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<24>,mlpack::ann::Glimpse<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<23>,mlpack::ann::HardTanH<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<22>,mlpack::ann::Highway<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<21>,mlpack::ann::Join<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<20>,mlpack::ann::LayerNorm<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<19>,mlpack::ann::LeakyReLU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<18>,mlpack::ann::CReLU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<17>,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer>*,boost::mpl::l_item<boost::mpl::long_<16>,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer>*,boost::mpl::l_item<boost::mpl::long_<15>,mlpack::ann::LogSoftMax<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<14>,mlpack::ann::Lookup<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<13>,mlpack::ann::LSTM<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<12>,mlpack::ann::GRU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<11>,mlpack::ann::FastLSTM<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<10>,mlpack::ann::MaxPooling<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<9>,mlpack::ann::MeanPooling<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<8>,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<7>,mlpack::ann::MultiplyConstant<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<6>,mlpack::ann::MultiplyMerge<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<5>,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<4>,mlpack::ann::Padding<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<3>,mlpack::ann::PReLU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<2>,mlpack::ann::WeightNorm<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<1>,T0,boost::mpl::l_end>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>,boost::mpl::true_>,boost::is_same<LayerType *,boost::recursive_variant_>,boost::mpl::false_,boost::mpl::false_,boost::mpl::false_>' being compiled
          with
          [
              LayerType=mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>,
              T=mlpack::ann::Add<arma::mat,arma::mat> *,
              T0=mlpack::ann::MoreTypes
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\ffn.hpp(260): message : see reference to class template instantiation 'boost::enable_if<boost::mpl::or_<boost::mpl::and_<boost::is_rvalue_reference<LayerType *&&>,boost::mpl::not_<boost::is_const<LayerType *>>,boost::mpl::not_<boost::is_same<LayerType *,boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>>>,boost::detail::variant::is_variant_constructible_from<LayerType *&&,boost::mpl::l_item<boost::mpl::long_<45>,T,boost::mpl::l_item<boost::mpl::long_<44>,mlpack::ann::AddMerge<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<43>,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<42>,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<41>,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<40>,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<39>,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<38>,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<37>,mlpack::ann::BatchNorm<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<36>,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<35>,mlpack::ann::Concat<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<34>,mlpack::ann::Concatenate<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<33>,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<32>,mlpack::ann::Constant<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<31>,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<30>,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<29>,mlpack::ann::DropConnect<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<28>,mlpack::ann::Dropout<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<27>,mlpack::ann::AlphaDropout<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<26>,mlpack::ann::ELU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<25>,mlpack::ann::FlexibleReLU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<24>,mlpack::ann::Glimpse<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<23>,mlpack::ann::HardTanH<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<22>,mlpack::ann::Highway<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<21>,mlpack::ann::Join<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<20>,mlpack::ann::LayerNorm<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<19>,mlpack::ann::LeakyReLU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<18>,mlpack::ann::CReLU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<17>,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer>*,boost::mpl::l_item<boost::mpl::long_<16>,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer>*,boost::mpl::l_item<boost::mpl::long_<15>,mlpack::ann::LogSoftMax<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<14>,mlpack::ann::Lookup<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<13>,mlpack::ann::LSTM<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<12>,mlpack::ann::GRU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<11>,mlpack::ann::FastLSTM<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<10>,mlpack::ann::MaxPooling<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<9>,mlpack::ann::MeanPooling<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<8>,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<7>,mlpack::ann::MultiplyConstant<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<6>,mlpack::ann::MultiplyMerge<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<5>,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<4>,mlpack::ann::Padding<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<3>,mlpack::ann::PReLU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<2>,mlpack::ann::WeightNorm<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<1>,T0,boost::mpl::l_end>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>,boost::mpl::true_>,boost::is_same<LayerType *,boost::recursive_variant_>,boost::mpl::false_,boost::mpl::false_,boost::mpl::false_>,bool>' being compiled
          with
          [
              LayerType=mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>,
              T=mlpack::ann::Add<arma::mat,arma::mat> *,
              T0=mlpack::ann::MoreTypes
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(1741): message : while compiling class template member function 'boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>::variant(T &&,boost::enable_if<boost::mpl::or_<boost::mpl::and_<boost::is_rvalue_reference<T&&>,boost::mpl::not_<boost::is_const<C>>,boost::mpl::not_<boost::is_same<T,boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>>>,boost::detail::variant::is_variant_constructible_from<T&&,boost::mpl::l_item<boost::mpl::long_<45>,T,boost::mpl::l_item<boost::mpl::long_<44>,mlpack::ann::AddMerge<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<43>,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<42>,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<41>,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<40>,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<39>,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<38>,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<37>,mlpack::ann::BatchNorm<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<36>,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<35>,mlpack::ann::Concat<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<34>,mlpack::ann::Concatenate<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<33>,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<32>,mlpack::ann::Constant<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<31>,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<30>,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<29>,mlpack::ann::DropConnect<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<28>,mlpack::ann::Dropout<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<27>,mlpack::ann::AlphaDropout<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<26>,mlpack::ann::ELU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<25>,mlpack::ann::FlexibleReLU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<24>,mlpack::ann::Glimpse<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<23>,mlpack::ann::HardTanH<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<22>,mlpack::ann::Highway<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<21>,mlpack::ann::Join<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<20>,mlpack::ann::LayerNorm<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<19>,mlpack::ann::LeakyReLU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<18>,mlpack::ann::CReLU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<17>,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer>*,boost::mpl::l_item<boost::mpl::long_<16>,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer>*,boost::mpl::l_item<boost::mpl::long_<15>,mlpack::ann::LogSoftMax<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<14>,mlpack::ann::Lookup<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<13>,mlpack::ann::LSTM<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<12>,mlpack::ann::GRU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<11>,mlpack::ann::FastLSTM<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<10>,mlpack::ann::MaxPooling<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<9>,mlpack::ann::MeanPooling<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<8>,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<7>,mlpack::ann::MultiplyConstant<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<6>,mlpack::ann::MultiplyMerge<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<5>,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<4>,mlpack::ann::Padding<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<3>,mlpack::ann::PReLU<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<2>,mlpack::ann::WeightNorm<arma::mat,arma::mat>*,boost::mpl::l_item<boost::mpl::long_<1>,T0,boost::mpl::l_end>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>,boost::mpl::true_>,boost::is_same<T,boost::recursive_variant_>,boost::mpl::false_,boost::mpl::false_,boost::mpl::false_>,bool>::type)'
          with
          [
              T=mlpack::ann::Add<arma::mat,arma::mat> *,
              T0=mlpack::ann::MoreTypes
          ]
C:\Dev\Assignments\A5_mlpack\mlpack_cnn_basic_redo\mnist_cnn\mnist_cnn\mnist_cnn\main.cpp(124): message : see reference to function template instantiation 'void mlpack::ann::FFN<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,mlpack::ann::RandomInitialization>::Add<mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>,int,int,int,int,int,int,int,int,int,int>(int,int,int,int,int,int,int,int,int,int)' being compiled
C:\Dev\Assignments\A5_mlpack\mlpack_cnn_basic_redo\mnist_cnn\mnist_cnn\mnist_cnn\main.cpp(114): message : see reference to function template instantiation 'void mlpack::ann::FFN<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,mlpack::ann::RandomInitialization>::Add<mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>,int,int,int,int,int,int,int,int,int,int>(int,int,int,int,int,int,int,int,int,int)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\convolution.hpp(225,59): warning C4244: 'return': conversion from 'double' to 'size_t', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\convolution.hpp(224): message : while compiling class template member function 'size_t mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>::ConvOutSize(const size_t,const size_t,const size_t,const size_t,const size_t)'
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\convolution_impl.hpp(216): message : see reference to function template instantiation 'size_t mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>::ConvOutSize(const size_t,const size_t,const size_t,const size_t,const size_t)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\ffn.hpp(260): message : see reference to class template instantiation 'mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat>' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse.hpp(282,19): warning C4244: 'initializing': conversion from 'arma::uword' to 'double', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse_impl.hpp(111): message : see reference to function template instantiation 'void mlpack::ann::Glimpse<arma::mat,arma::mat>::ReSampling<double>(const arma::Mat<double> &,arma::Mat<double> &)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse_impl.hpp(111): message : see reference to function template instantiation 'void mlpack::ann::Glimpse<arma::mat,arma::mat>::ReSampling<double>(const arma::Mat<double> &,arma::Mat<double> &)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\forward_visitor_impl.hpp(32): message : see reference to function template instantiation 'void mlpack::ann::Glimpse<arma::mat,arma::mat>::Forward<double>(const arma::Mat<double> &&,arma::Mat<double> &&)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\forward_visitor_impl.hpp(32): message : see reference to function template instantiation 'void mlpack::ann::Glimpse<arma::mat,arma::mat>::Forward<double>(const arma::Mat<double> &&,arma::Mat<double> &&)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse.hpp(283,20): warning C4244: 'initializing': conversion from 'arma::uword' to 'double', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse.hpp(305,36): warning C4244: 'argument': conversion from 'double' to 'const arma::uword', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse.hpp(305,30): warning C4244: 'argument': conversion from 'double' to 'const arma::uword', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse.hpp(306,33): warning C4244: 'argument': conversion from 'const _Ty' to 'const arma::uword', possible loss of data
          with
          [
              _Ty=double
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse.hpp(306,19): warning C4244: 'argument': conversion from 'double' to 'const arma::uword', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse.hpp(307,44): warning C4244: 'argument': conversion from 'double' to 'const arma::uword', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse.hpp(307,27): warning C4244: 'argument': conversion from 'const _Ty' to 'const arma::uword', possible loss of data
          with
          [
              _Ty=double
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse.hpp(308,52): warning C4244: 'argument': conversion from 'const _Ty' to 'const arma::uword', possible loss of data
          with
          [
              _Ty=double
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse.hpp(308,27): warning C4244: 'argument': conversion from 'const _Ty' to 'const arma::uword', possible loss of data
          with
          [
              _Ty=double
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\max_pooling.hpp(167,44): warning C4244: '=': conversion from 'eT' to 'eT', possible loss of data
          with
          [
              eT=arma::u64
          ]
          and
          [
              eT=double
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\max_pooling_impl.hpp(101): message : see reference to function template instantiation 'void mlpack::ann::MaxPooling<arma::mat,arma::mat>::PoolingOperation<double>(const arma::Mat<double> &,arma::Mat<double> &,arma::Mat<double> &)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\max_pooling_impl.hpp(100): message : see reference to function template instantiation 'void mlpack::ann::MaxPooling<arma::mat,arma::mat>::PoolingOperation<double>(const arma::Mat<double> &,arma::Mat<double> &,arma::Mat<double> &)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\forward_visitor_impl.hpp(32): message : see reference to function template instantiation 'void mlpack::ann::MaxPooling<arma::mat,arma::mat>::Forward<double>(const arma::Mat<double> &&,arma::Mat<double> &&)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\forward_visitor_impl.hpp(32): message : see reference to function template instantiation 'void mlpack::ann::MaxPooling<arma::mat,arma::mat>::Forward<double>(const arma::Mat<double> &&,arma::Mat<double> &&)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\batch_norm_impl.hpp(123,22): warning C4244: 'argument': conversion from 'const arma::uword' to 'const double', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\backward_visitor_impl.hpp(63): message : see reference to function template instantiation 'void mlpack::ann::BatchNorm<arma::mat,arma::mat>::Backward<double>(const arma::Mat<double> &&,arma::Mat<double> &&,arma::Mat<double> &&)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\backward_visitor_impl.hpp(63): message : see reference to function template instantiation 'void mlpack::ann::BatchNorm<arma::mat,arma::mat>::Backward<double>(const arma::Mat<double> &&,arma::Mat<double> &&,arma::Mat<double> &&)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\backward_visitor_impl.hpp(50): message : see reference to function template instantiation 'void mlpack::ann::BackwardVisitor::LayerBackward<LayerType>(T *,arma::mat &) const' being compiled
          with
          [
              LayerType=mlpack::ann::BatchNorm<arma::mat,arma::mat>,
              T=mlpack::ann::BatchNorm<arma::mat,arma::mat>
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(1028): message : see reference to function template instantiation 'void mlpack::ann::BackwardVisitor::operator ()<mlpack::ann::BatchNorm<arma::mat,arma::mat>>(LayerType *) const' being compiled
          with
          [
              LayerType=mlpack::ann::BatchNorm<arma::mat,arma::mat>
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(119): message : see reference to function template instantiation 'void boost::detail::variant::invoke_visitor<Visitor,false>::internal_visit<T&>(mlpack::ann::BatchNorm<arma::mat,arma::mat>*&,int)' being compiled
          with
          [
              Visitor=const mlpack::ann::BackwardVisitor,
              T=T8
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(117): message : see reference to function template instantiation 'void boost::detail::variant::invoke_visitor<Visitor,false>::internal_visit<T&>(mlpack::ann::BatchNorm<arma::mat,arma::mat>*&,int)' being compiled
          with
          [
              Visitor=const mlpack::ann::BackwardVisitor,
              T=T8
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(160): message : see reference to function template instantiation 'void boost::detail::variant::visitation_impl_invoke_impl<Visitor,VoidPtrCV,T>(int,Visitor &,VoidPtrCV,T *,boost::mpl::true_)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::BackwardVisitor,false>,
              VoidPtrCV=void *,
              T=T8
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(238): message : see reference to function template instantiation 'void boost::detail::variant::visitation_impl_invoke<Visitor,VoidPtrCV,T8,NoBackupFlag>(int,Visitor &,VoidPtrCV,T *,NoBackupFlag,int)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::BackwardVisitor,false>,
              VoidPtrCV=void *,
              NoBackupFlag=boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>::has_fallback_type_,
              T=T8
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(2328): message : see reference to function template instantiation 'void boost::detail::variant::visitation_impl<first_which,first_step,Visitor,VoidPtrCV,boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>::has_fallback_type_>(const int,const int,Visitor &,VoidPtrCV,boost::mpl::false_,NoBackupFlag,Which *,step0 *)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::BackwardVisitor,false>,
              VoidPtrCV=void *,
              NoBackupFlag=boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>::has_fallback_type_,
              Which=first_which,
              step0=first_step
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(2348): message : see reference to function template instantiation 'void boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>::internal_apply_visitor_impl<Visitor,void*>(int,int,Visitor &,VoidPtrCV)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::BackwardVisitor,false>,
              VoidPtrCV=void *
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(2349): message : see reference to function template instantiation 'void boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>::internal_apply_visitor_impl<Visitor,void*>(int,int,Visitor &,VoidPtrCV)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::BackwardVisitor,false>,
              VoidPtrCV=void *
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(2391): message : see reference to function template instantiation 'void boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>::internal_apply_visitor<boost::detail::variant::invoke_visitor<Visitor,false>>(boost::detail::variant::invoke_visitor<Visitor,false> &)' being compiled
          with
          [
              Visitor=const mlpack::ann::BackwardVisitor
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(2393): message : see reference to function template instantiation 'void boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>::internal_apply_visitor<boost::detail::variant::invoke_visitor<Visitor,false>>(boost::detail::variant::invoke_visitor<Visitor,false> &)' being compiled
          with
          [
              Visitor=const mlpack::ann::BackwardVisitor
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\apply_visitor_unary.hpp(68): message : see reference to function template instantiation 'void boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>::apply_visitor<const Visitor>(Visitor &) &' being compiled
          with
          [
              Visitor=mlpack::ann::BackwardVisitor
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\apply_visitor_unary.hpp(68): message : see reference to function template instantiation 'void boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>::apply_visitor<const Visitor>(Visitor &) &' being compiled
          with
          [
              Visitor=mlpack::ann::BackwardVisitor
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\ffn_impl.hpp(467): message : see reference to function template instantiation 'void boost::apply_visitor<mlpack::ann::BackwardVisitor,_Ty&>(const Visitor &,Visitable)' being compiled
          with
          [
              _Ty=boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>,
              Visitor=mlpack::ann::BackwardVisitor,
              Visitable=boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes> &
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\ffn_impl.hpp(464): message : while compiling class template member function 'void mlpack::ann::FFN<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,mlpack::ann::RandomInitialization>::Backward(void)'
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\ffn_impl.hpp(343): message : see reference to function template instantiation 'void mlpack::ann::FFN<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,mlpack::ann::RandomInitialization>::Backward(void)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\ffn_impl.hpp(284): message : while compiling class template member function 'double mlpack::ann::FFN<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,mlpack::ann::RandomInitialization>::Evaluate(const arma::mat &,const size_t,const size_t)'
C:\vcpkg\installed\x64-windows\include\ensmallen_bits\function\add_separable_evaluate.hpp(62): message : see reference to function template instantiation 'double mlpack::ann::FFN<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,mlpack::ann::RandomInitialization>::Evaluate(const arma::mat &,const size_t,const size_t)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\batch_norm_impl.hpp(127,66): warning C4244: 'argument': conversion from 'const arma::uword' to 'const double', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse_impl.hpp(158,22): warning C4244: 'initializing': conversion from 'double' to 'size_t', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\backward_visitor_impl.hpp(63): message : see reference to function template instantiation 'void mlpack::ann::Glimpse<arma::mat,arma::mat>::Backward<double>(const arma::Mat<double> &&,arma::Mat<double> &&,arma::Mat<double> &&)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\backward_visitor_impl.hpp(63): message : see reference to function template instantiation 'void mlpack::ann::Glimpse<arma::mat,arma::mat>::Backward<double>(const arma::Mat<double> &&,arma::Mat<double> &&,arma::Mat<double> &&)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\backward_visitor_impl.hpp(50): message : see reference to function template instantiation 'void mlpack::ann::BackwardVisitor::LayerBackward<LayerType>(T *,arma::mat &) const' being compiled
          with
          [
              LayerType=mlpack::ann::Glimpse<arma::mat,arma::mat>,
              T=mlpack::ann::Glimpse<arma::mat,arma::mat>
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(1028): message : see reference to function template instantiation 'void mlpack::ann::BackwardVisitor::operator ()<mlpack::ann::Glimpse<arma::mat,arma::mat>>(LayerType *) const' being compiled
          with
          [
              LayerType=mlpack::ann::Glimpse<arma::mat,arma::mat>
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(119): message : see reference to function template instantiation 'void boost::detail::variant::invoke_visitor<Visitor,false>::internal_visit<T&>(mlpack::ann::Glimpse<arma::mat,arma::mat>*&,int)' being compiled
          with
          [
              Visitor=const mlpack::ann::BackwardVisitor,
              T=T21
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(117): message : see reference to function template instantiation 'void boost::detail::variant::invoke_visitor<Visitor,false>::internal_visit<T&>(mlpack::ann::Glimpse<arma::mat,arma::mat>*&,int)' being compiled
          with
          [
              Visitor=const mlpack::ann::BackwardVisitor,
              T=T21
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(160): message : see reference to function template instantiation 'void boost::detail::variant::visitation_impl_invoke_impl<Visitor,VoidPtrCV,T>(int,Visitor &,VoidPtrCV,T *,boost::mpl::true_)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::BackwardVisitor,false>,
              VoidPtrCV=void *,
              T=T21
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(238): message : see reference to function template instantiation 'void boost::detail::variant::visitation_impl_invoke<Visitor,VoidPtrCV,T21,NoBackupFlag>(int,Visitor &,VoidPtrCV,T *,NoBackupFlag,int)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::BackwardVisitor,false>,
              VoidPtrCV=void *,
              NoBackupFlag=boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>::has_fallback_type_,
              T=T21
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\layer_norm_impl.hpp(95,22): warning C4244: 'argument': conversion from 'const arma::uword' to 'const double', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\backward_visitor_impl.hpp(63): message : see reference to function template instantiation 'void mlpack::ann::LayerNorm<arma::mat,arma::mat>::Backward<double>(const arma::Mat<double> &&,arma::Mat<double> &&,arma::Mat<double> &&)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\backward_visitor_impl.hpp(63): message : see reference to function template instantiation 'void mlpack::ann::LayerNorm<arma::mat,arma::mat>::Backward<double>(const arma::Mat<double> &&,arma::Mat<double> &&,arma::Mat<double> &&)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\backward_visitor_impl.hpp(50): message : see reference to function template instantiation 'void mlpack::ann::BackwardVisitor::LayerBackward<LayerType>(T *,arma::mat &) const' being compiled
          with
          [
              LayerType=mlpack::ann::LayerNorm<arma::mat,arma::mat>,
              T=mlpack::ann::LayerNorm<arma::mat,arma::mat>
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(1028): message : see reference to function template instantiation 'void mlpack::ann::BackwardVisitor::operator ()<mlpack::ann::LayerNorm<arma::mat,arma::mat>>(LayerType *) const' being compiled
          with
          [
              LayerType=mlpack::ann::LayerNorm<arma::mat,arma::mat>
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(119): message : see reference to function template instantiation 'void boost::detail::variant::invoke_visitor<Visitor,false>::internal_visit<T&>(mlpack::ann::LayerNorm<arma::mat,arma::mat>*&,int)' being compiled
          with
          [
              Visitor=const mlpack::ann::BackwardVisitor,
              T=T25
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(117): message : see reference to function template instantiation 'void boost::detail::variant::invoke_visitor<Visitor,false>::internal_visit<T&>(mlpack::ann::LayerNorm<arma::mat,arma::mat>*&,int)' being compiled
          with
          [
              Visitor=const mlpack::ann::BackwardVisitor,
              T=T25
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(160): message : see reference to function template instantiation 'void boost::detail::variant::visitation_impl_invoke_impl<Visitor,VoidPtrCV,T>(int,Visitor &,VoidPtrCV,T *,boost::mpl::true_)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::BackwardVisitor,false>,
              VoidPtrCV=void *,
              T=T25
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(238): message : see reference to function template instantiation 'void boost::detail::variant::visitation_impl_invoke<Visitor,VoidPtrCV,T25,NoBackupFlag>(int,Visitor &,VoidPtrCV,T *,NoBackupFlag,int)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::BackwardVisitor,false>,
              VoidPtrCV=void *,
              NoBackupFlag=boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>::has_fallback_type_,
              T=T25
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\layer_norm_impl.hpp(99,66): warning C4244: 'argument': conversion from 'const arma::uword' to 'const double', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse.hpp(326,19): warning C4244: 'initializing': conversion from 'arma::uword' to 'double', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse_impl.hpp(199): message : see reference to function template instantiation 'void mlpack::ann::Glimpse<arma::mat,arma::mat>::DownwardReSampling<double>(const arma::Mat<double> &,const arma::Mat<double> &,arma::Mat<double> &)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse_impl.hpp(198): message : see reference to function template instantiation 'void mlpack::ann::Glimpse<arma::mat,arma::mat>::DownwardReSampling<double>(const arma::Mat<double> &,const arma::Mat<double> &,arma::Mat<double> &)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\backward_visitor_impl.hpp(63): message : see reference to function template instantiation 'void mlpack::ann::Glimpse<arma::mat,arma::mat>::Backward<double>(const arma::Mat<double> &&,arma::Mat<double> &&,arma::Mat<double> &&)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\backward_visitor_impl.hpp(63): message : see reference to function template instantiation 'void mlpack::ann::Glimpse<arma::mat,arma::mat>::Backward<double>(const arma::Mat<double> &&,arma::Mat<double> &&,arma::Mat<double> &&)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse.hpp(327,20): warning C4244: 'initializing': conversion from 'arma::uword' to 'double', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse.hpp(353,22): warning C4244: 'argument': conversion from 'double' to 'const arma::uword', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse.hpp(353,16): warning C4244: 'argument': conversion from 'double' to 'const arma::uword', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse.hpp(353,43): warning C4244: 'argument': conversion from 'double' to 'const arma::uword', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse.hpp(353,37): warning C4244: 'argument': conversion from 'double' to 'const arma::uword', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse.hpp(354,30): warning C4244: 'argument': conversion from 'const _Ty' to 'const arma::uword', possible loss of data
          with
          [
              _Ty=double
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse.hpp(354,16): warning C4244: 'argument': conversion from 'double' to 'const arma::uword', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse.hpp(355,21): warning C4244: 'argument': conversion from 'const _Ty' to 'const arma::uword', possible loss of data
          with
          [
              _Ty=double
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse.hpp(354,55): warning C4244: 'argument': conversion from 'double' to 'const arma::uword', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse.hpp(356,41): warning C4244: 'argument': conversion from 'double' to 'const arma::uword', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse.hpp(356,24): warning C4244: 'argument': conversion from 'const _Ty' to 'const arma::uword', possible loss of data
          with
          [
              _Ty=double
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse.hpp(357,13): warning C4244: 'argument': conversion from 'double' to 'const arma::uword', possible loss of data
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse.hpp(356,64): warning C4244: 'argument': conversion from 'const _Ty' to 'const arma::uword', possible loss of data
          with
          [
              _Ty=double
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse.hpp(358,49): warning C4244: 'argument': conversion from 'const _Ty' to 'const arma::uword', possible loss of data
          with
          [
              _Ty=double
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse.hpp(358,24): warning C4244: 'argument': conversion from 'const _Ty' to 'const arma::uword', possible loss of data
          with
          [
              _Ty=double
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse.hpp(359,46): warning C4244: 'argument': conversion from 'const _Ty' to 'const arma::uword', possible loss of data
          with
          [
              _Ty=double
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\glimpse.hpp(359,21): warning C4244: 'argument': conversion from 'const _Ty' to 'const arma::uword', possible loss of data
          with
          [
              _Ty=double
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\max_pooling.hpp(187,28): warning C4244: 'argument': conversion from 'eT' to 'const arma::uword', possible loss of data
          with
          [
              eT=double
          ]
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\max_pooling_impl.hpp(132): message : see reference to function template instantiation 'void mlpack::ann::MaxPooling<arma::mat,arma::mat>::Unpooling<double>(const arma::Mat<double> &,arma::Mat<double> &,arma::Mat<double> &)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\layer\max_pooling_impl.hpp(131): message : see reference to function template instantiation 'void mlpack::ann::MaxPooling<arma::mat,arma::mat>::Unpooling<double>(const arma::Mat<double> &,arma::Mat<double> &,arma::Mat<double> &)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\backward_visitor_impl.hpp(63): message : see reference to function template instantiation 'void mlpack::ann::MaxPooling<arma::mat,arma::mat>::Backward<double>(const arma::Mat<double> &&,arma::Mat<double> &&,arma::Mat<double> &&)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\backward_visitor_impl.hpp(63): message : see reference to function template instantiation 'void mlpack::ann::MaxPooling<arma::mat,arma::mat>::Backward<double>(const arma::Mat<double> &&,arma::Mat<double> &&,arma::Mat<double> &&)' being compiled
C:\vcpkg\installed\x64-windows\include\mlpack\methods\ann\visitor\backward_visitor_impl.hpp(50): message : see reference to function template instantiation 'void mlpack::ann::BackwardVisitor::LayerBackward<LayerType>(T *,arma::mat &) const' being compiled
          with
          [
              LayerType=mlpack::ann::MaxPooling<arma::mat,arma::mat>,
              T=mlpack::ann::MaxPooling<arma::mat,arma::mat>
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\variant.hpp(1028): message : see reference to function template instantiation 'void mlpack::ann::BackwardVisitor::operator ()<mlpack::ann::MaxPooling<arma::mat,arma::mat>>(LayerType *) const' being compiled
          with
          [
              LayerType=mlpack::ann::MaxPooling<arma::mat,arma::mat>
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(119): message : see reference to function template instantiation 'void boost::detail::variant::invoke_visitor<Visitor,false>::internal_visit<T&>(mlpack::ann::MaxPooling<arma::mat,arma::mat>*&,int)' being compiled
          with
          [
              Visitor=const mlpack::ann::BackwardVisitor,
              T=T35
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(117): message : see reference to function template instantiation 'void boost::detail::variant::invoke_visitor<Visitor,false>::internal_visit<T&>(mlpack::ann::MaxPooling<arma::mat,arma::mat>*&,int)' being compiled
          with
          [
              Visitor=const mlpack::ann::BackwardVisitor,
              T=T35
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(160): message : see reference to function template instantiation 'void boost::detail::variant::visitation_impl_invoke_impl<Visitor,VoidPtrCV,T>(int,Visitor &,VoidPtrCV,T *,boost::mpl::true_)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::BackwardVisitor,false>,
              VoidPtrCV=void *,
              T=T35
          ]
C:\vcpkg\installed\x64-windows\include\boost\variant\detail\visitation_impl.hpp(238): message : see reference to function template instantiation 'void boost::detail::variant::visitation_impl_invoke<Visitor,VoidPtrCV,T35,NoBackupFlag>(int,Visitor &,VoidPtrCV,T *,NoBackupFlag,int)' being compiled
          with
          [
              Visitor=boost::detail::variant::invoke_visitor<const mlpack::ann::BackwardVisitor,false>,
              VoidPtrCV=void *,
              NoBackupFlag=boost::variant<mlpack::ann::Add<arma::mat,arma::mat> *,mlpack::ann::AddMerge<arma::mat,arma::mat> *,mlpack::ann::AtrousConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::LogisticFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::IdentityFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::TanhFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::RectifierFunction,arma::mat,arma::mat> *,mlpack::ann::BaseLayer<mlpack::ann::SoftplusFunction,arma::mat,arma::mat> *,mlpack::ann::BatchNorm<arma::mat,arma::mat> *,mlpack::ann::BilinearInterpolation<arma::mat,arma::mat> *,mlpack::ann::Concat<arma::mat,arma::mat> *,mlpack::ann::Concatenate<arma::mat,arma::mat> *,mlpack::ann::ConcatPerformance<mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat>,arma::mat,arma::mat> *,mlpack::ann::Constant<arma::mat,arma::mat> *,mlpack::ann::Convolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::FullConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::TransposedConvolution<mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,mlpack::ann::NaiveConvolution<mlpack::ann::ValidConvolution>,arma::mat,arma::mat> *,mlpack::ann::DropConnect<arma::mat,arma::mat> *,mlpack::ann::Dropout<arma::mat,arma::mat> *,mlpack::ann::AlphaDropout<arma::mat,arma::mat> *,mlpack::ann::ELU<arma::mat,arma::mat> *,mlpack::ann::FlexibleReLU<arma::mat,arma::mat> *,mlpack::ann::Glimpse<arma::mat,arma::mat> *,mlpack::ann::HardTanH<arma::mat,arma::mat> *,mlpack::ann::Highway<arma::mat,arma::mat> *,mlpack::ann::Join<arma::mat,arma::mat> *,mlpack::ann::LayerNorm<arma::mat,arma::mat> *,mlpack::ann::LeakyReLU<arma::mat,arma::mat> *,mlpack::ann::CReLU<arma::mat,arma::mat> *,mlpack::ann::Linear<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LinearNoBias<arma::mat,arma::mat,mlpack::ann::NoRegularizer> *,mlpack::ann::LogSoftMax<arma::mat,arma::mat> *,mlpack::ann::Lookup<arma::mat,arma::mat> *,mlpack::ann::LSTM<arma::mat,arma::mat> *,mlpack::ann::GRU<arma::mat,arma::mat> *,mlpack::ann::FastLSTM<arma::mat,arma::mat> *,mlpack::ann::MaxPooling<arma::mat,arma::mat> *,mlpack::ann::MeanPooling<arma::mat,arma::mat> *,mlpack::ann::MiniBatchDiscrimination<arma::mat,arma::mat> *,mlpack::ann::MultiplyConstant<arma::mat,arma::mat> *,mlpack::ann::MultiplyMerge<arma::mat,arma::mat> *,mlpack::ann::NegativeLogLikelihood<arma::mat,arma::mat> *,mlpack::ann::Padding<arma::mat,arma::mat> *,mlpack::ann::PReLU<arma::mat,arma::mat> *,mlpack::ann::WeightNorm<arma::mat,arma::mat> *,mlpack::ann::MoreTypes>::has_fallback_type_,
              T=T35
          ]
     Creating library C:\Dev\Assignments\A5_mlpack\mlpack_cnn_basic_redo\mnist_cnn\mnist_cnn\x64\Release\mnist_cnn.lib and object C:\Dev\Assignments\A5_mlpack\mlpack_cnn_basic_redo\mnist_cnn\mnist_cnn\x64\Release\mnist_cnn.exp
  Generating code
  92 of 31056 functions ( 0.3%) were compiled, the rest were copied from previous compilation.
    58 functions were new in current compilation
    196 functions had inline decision re-evaluated but remain unchanged
  Finished generating code
  mnist_cnn.vcxproj -> C:\Dev\Assignments\A5_mlpack\mlpack_cnn_basic_redo\mnist_cnn\mnist_cnn\x64\Release\mnist_cnn.exe
